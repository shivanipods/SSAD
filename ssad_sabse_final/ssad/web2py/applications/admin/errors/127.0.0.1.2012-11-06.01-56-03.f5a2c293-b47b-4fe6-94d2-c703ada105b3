(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> not all arguments converted during string formatting"
p3
sS'layer'
p4
S'C:\\web2py\\applications\\admin\\controllers/default.py'
p5
sS'code'
p6
S'# coding: utf8\n\nEXPERIMENTAL_STUFF = True\n\nif EXPERIMENTAL_STUFF:\n    is_mobile = request.user_agent().is_mobile\n    if is_mobile:\n        response.view = response.view.replace(\'default/\',\'default.mobile/\')\n        response.menu = []\n\nfrom gluon.admin import *\nfrom gluon.fileutils import abspath, read_file, write_file\nfrom glob import glob\nimport shutil\nimport platform\n\nif DEMO_MODE and request.function in [\'change_password\',\'pack\',\'pack_plugin\',\'upgrade_web2py\',\'uninstall\',\'cleanup\',\'compile_app\',\'remove_compiled_app\',\'delete\',\'delete_plugin\',\'create_file\',\'upload_file\',\'update_languages\',\'reload_routes\']:\n    session.flash = T(\'disabled in demo mode\')\n    redirect(URL(\'site\'))\n\nif not is_manager() and request.function in [\'change_password\',\'upgrade_web2py\']:\n    session.flash = T(\'disabled in multi user mode\')\n    redirect(URL(\'site\'))\n\nif FILTER_APPS and request.args(0) and not request.args(0) in FILTER_APPS:\n    session.flash = T(\'disabled in demo mode\')\n    redirect(URL(\'site\'))\n\ndef safe_open(a,b):\n    if DEMO_MODE and \'w\' in b:\n        class tmp:\n            def write(self,data): pass\n        return tmp()\n    return open(a,b)\n\ndef safe_read(a, b=\'r\'):\n    safe_file = safe_open(a, b)\n    try:\n        return safe_file.read()\n    finally:\n        safe_file.close()\n\ndef safe_write(a, value, b=\'w\'):\n    safe_file = safe_open(a, b)\n    try:\n        safe_file.write(value)\n    finally:\n        safe_file.close()\n\ndef get_app(name=None):\n    app = name or request.args(0)\n    if app and (not MULTI_USER_MODE or db(db.app.name==app)(db.app.owner==auth.user.id).count()):\n        return app\n    session.flash = \'App does not exist or your are not authorized\'\n    redirect(URL(\'site\'))\n\ndef index():\n    """ Index handler """\n\n    send = request.vars.send\n    if DEMO_MODE:\n        session.authorized = True\n        session.last_time = t0\n    if not send:\n        send = URL(\'site\')\n    if session.authorized:\n        redirect(send)\n    elif request.vars.password:\n        if verify_password(request.vars.password):\n            session.authorized = True\n            login_record(True)\n\n            if CHECK_VERSION:\n                session.check_version = True\n            else:\n                session.check_version = False\n\n            session.last_time = t0\n            if isinstance(send, list):  # ## why does this happen?\n                send = str(send[0])\n\n            redirect(send)\n        else:\n            times_denied = login_record(False)\n            if times_denied >= allowed_number_of_attempts:\n                response.flash = \\\n                    T(\'admin disabled because too many invalid login attempts\')\n            elif times_denied == allowed_number_of_attempts - 1:\n                response.flash = \\\n                    T(\'You have one more login attempt before you are locked out\')\n            else:\n                response.flash = T(\'invalid password.\')\n    return dict(send=send)\n\n\ndef check_version():\n    """ Checks if web2py is up to date """\n\n    session.forget()\n    session._unlock(response)\n\n    new_version, version_number = check_new_version(request.env.web2py_version,\n                                    WEB2PY_VERSION_URL)\n\n    if new_version == -1:\n        return A(T(\'Unable to check for upgrades\'), _href=WEB2PY_URL)\n    elif new_version != True:\n        return A(T(\'web2py is up to date\'), _href=WEB2PY_URL)\n    elif platform.system().lower() in (\'windows\',\'win32\',\'win64\') and os.path.exists("web2py.exe"):\n        return SPAN(\'You should upgrade to version %s\' % version_number)\n    else:\n        return sp_button(URL(\'upgrade_web2py\'), T(\'upgrade now\')) \\\n          + XML(\' <strong class="upgrade_version">%s</strong>\' % version_number)\n\n\ndef logout():\n    """ Logout handler """\n    session.authorized = None\n    if MULTI_USER_MODE:\n        redirect(URL(\'user/logout\'))\n    redirect(URL(\'index\'))\n\n\ndef change_password():\n\n    if session.pam_user:\n        session.flash = T(\'PAM authenticated user, cannot change password here\')\n        redirect(URL(\'site\'))\n    form=SQLFORM.factory(Field(\'current_admin_password\',\'password\'),\n                         Field(\'new_admin_password\',\'password\',requires=IS_STRONG()),\n                         Field(\'new_admin_password_again\',\'password\'))\n    if form.accepts(request.vars):\n        if not verify_password(request.vars.current_admin_password):\n            form.errors.current_admin_password = T(\'invalid password\')\n        elif form.vars.new_admin_password != form.vars.new_admin_password_again:\n            form.errors.new_admin_password_again = T(\'no match\')\n        else:\n            path = abspath(\'parameters_%s.py\' % request.env.server_port)\n            safe_write(path, \'password="%s"\' % CRYPT()(request.vars.new_admin_password)[0])\n            session.flash = T(\'password changed\')\n            redirect(URL(\'site\'))\n    return dict(form=form)\n\ndef site():\n    """ Site handler """\n\n    myversion = request.env.web2py_version\n\n    # Shortcut to make the elif statements more legible\n    file_or_appurl = \'file\' in request.vars or \'appurl\' in request.vars\n\n    if DEMO_MODE:\n        pass\n\n    elif request.vars.filename and not \'file\' in request.vars:\n        # create a new application\n        appname = cleanpath(request.vars.filename).replace(\'.\', \'_\')\n        if app_create(appname, request):\n            if MULTI_USER_MODE:\n                db.app.insert(name=appname,owner=auth.user.id)\n            session.flash = T(\'new application "%s" created\', appname)\n            redirect(URL(\'design\',args=appname))\n        else:\n            session.flash = \\\n                T(\'unable to create application "%s" (it may exist already)\', request.vars.filename)\n        redirect(URL(r=request))\n\n    elif file_or_appurl and not request.vars.filename:\n        # can\'t do anything without an app name\n        msg = \'you must specify a name for the uploaded application\'\n        response.flash = T(msg)\n\n    elif file_or_appurl and request.vars.filename:\n        # fetch an application via URL or file upload\n        f = None\n        if request.vars.appurl is not \'\':\n            try:\n                f = urllib.urlopen(request.vars.appurl)\n            except Exception, e:\n                session.flash = DIV(T(\'Unable to download app because:\'),PRE(str(e)))\n                redirect(URL(r=request))\n            fname = request.vars.appurl\n        elif request.vars.file is not \'\':\n            f = request.vars.file.file\n            fname = request.vars.file.filename\n\n        if f:\n            appname = cleanpath(request.vars.filename).replace(\'.\', \'_\')\n            installed = app_install(appname, f, request, fname,\n                                    overwrite=request.vars.overwrite_check)\n        if f and installed:\n            msg = \'application %(appname)s installed with md5sum: %(digest)s\'\n            session.flash = T(msg, dict(appname=appname,\n                                        digest=md5_hash(installed)))\n        elif f and request.vars.overwrite_check:\n            msg = \'unable to install application "%(appname)s"\'\n            session.flash = T(msg, dict(appname=request.vars.filename))\n\n        else:\n            msg = \'unable to install application "%(appname)s"\'\n            session.flash = T(msg, dict(appname=request.vars.filename))\n\n        redirect(URL(r=request))\n\n    regex = re.compile(\'^\\w+$\')\n\n    if is_manager():\n        apps = [f for f in os.listdir(apath(r=request)) if regex.match(f)]\n    else:\n        apps = [f.name for f in db(db.app.owner==auth.user_id).select()]\n\n    if FILTER_APPS:\n        apps = [f for f in apps if f in FILTER_APPS]\n\n    apps = sorted(apps,lambda a,b:cmp(a.upper(),b.upper()))\n\n    return dict(app=None, apps=apps, myversion=myversion)\n\n\ndef pack():\n    app = get_app()\n\n    if len(request.args) == 1:\n        fname = \'web2py.app.%s.w2p\' % app\n        filename = app_pack(app, request)\n    else:\n        fname = \'web2py.app.%s.compiled.w2p\' % app\n        filename = app_pack_compiled(app, request)\n\n    if filename:\n        response.headers[\'Content-Type\'] = \'application/w2p\'\n        disposition = \'attachment; filename=%s\' % fname\n        response.headers[\'Content-Disposition\'] = disposition\n        return safe_read(filename, \'rb\')\n    else:\n        session.flash = T(\'internal error\')\n        redirect(URL(\'site\'))\n\ndef pack_plugin():\n    app = get_app()\n    if len(request.args) == 2:\n        fname = \'web2py.plugin.%s.w2p\' % request.args[1]\n        filename = plugin_pack(app, request.args[1], request)\n    if filename:\n        response.headers[\'Content-Type\'] = \'application/w2p\'\n        disposition = \'attachment; filename=%s\' % fname\n        response.headers[\'Content-Disposition\'] = disposition\n        return safe_read(filename, \'rb\')\n    else:\n        session.flash = T(\'internal error\')\n        redirect(URL(\'plugin\',args=request.args))\n\ndef upgrade_web2py():\n    if \'upgrade\' in request.vars:\n        (success, error) = upgrade(request)\n        if success:\n            session.flash = T(\'web2py upgraded; please restart it\')\n        else:\n            session.flash = T(\'unable to upgrade because "%s"\', error)\n        redirect(URL(\'site\'))\n    elif \'noupgrade\' in request.vars:\n        redirect(URL(\'site\'))\n    return dict()\n\ndef uninstall():\n    app = get_app()\n    if \'delete\' in request.vars:\n        if MULTI_USER_MODE:\n            if is_manager() and db(db.app.name==app).delete():\n                pass\n            elif db(db.app.name==app)(db.app.owner==auth.user.id).delete():\n                pass\n            else:\n                session.flash = T(\'no permission to uninstall "%s"\', app)\n                redirect(URL(\'site\'))\n        if app_uninstall(app, request):\n            session.flash = T(\'application "%s" uninstalled\', app)\n        else:\n            session.flash = T(\'unable to uninstall "%s"\', app)\n        redirect(URL(\'site\'))\n    elif \'nodelete\' in request.vars:\n        redirect(URL(\'site\'))\n    return dict(app=app)\n\n\ndef cleanup():\n    app = get_app()\n    clean = app_cleanup(app, request)\n    if not clean:\n        session.flash = T("some files could not be removed")\n    else:\n        session.flash = T(\'cache, errors and sessions cleaned\')\n\n    redirect(URL(\'site\'))\n\n\ndef compile_app():\n    app = get_app()\n    c = app_compile(app, request)\n    if not c:\n        session.flash = T(\'application compiled\')\n    else:\n        session.flash = DIV(T(\'Cannot compile: there are errors in your app:\'),\n                              CODE(c))\n    redirect(URL(\'site\'))\n\n\ndef remove_compiled_app():\n    """ Remove the compiled application """\n    app = get_app()\n    remove_compiled_application(apath(app, r=request))\n    session.flash = T(\'compiled application removed\')\n    redirect(URL(\'site\'))\n\ndef delete():\n    """ Object delete handler """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    sender = request.vars.sender\n\n    if isinstance(sender, list):  # ## fix a problem with Vista\n        sender = sender[0]\n\n    if \'nodelete\' in request.vars:\n        redirect(URL(sender))\n    elif \'delete\' in request.vars:\n        try:\n            os.unlink(apath(filename, r=request))\n            session.flash = T(\'file "%(filename)s" deleted\',\n                              dict(filename=filename))\n        except Exception:\n            session.flash = T(\'unable to delete file "%(filename)s"\',\n                              dict(filename=filename))\n        redirect(URL(sender))\n    return dict(filename=filename, sender=sender)\n\ndef enable():\n    app = get_app()\n    filename = os.path.join(apath(app, r=request),\'DISABLED\')\n    if os.path.exists(filename):\n        os.unlink(filename)\n        return SPAN(T(\'Disable\'),_style=\'color:green\')\n    else:\n        open(filename,\'wb\').write(time.ctime())\n        return SPAN(T(\'Enable\'),_style=\'color:red\')\n\ndef peek():\n    """ Visualize object code """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    try:\n        data = safe_read(apath(filename, r=request)).replace(\'\\r\',\'\')\n    except IOError:\n        session.flash = T(\'file does not exist\')\n        redirect(URL(\'site\'))\n\n    extension = filename[filename.rfind(\'.\') + 1:].lower()\n\n    return dict(app=request.args[0],\n                filename=filename,\n                data=data,\n                extension=extension)\n\n\ndef test():\n    """ Execute controller tests """\n    app = get_app()\n    if len(request.args) > 1:\n        file = request.args[1]\n    else:\n        file = \'.*\\.py\'\n\n    controllers = listdir(apath(\'%s/controllers/\' % app, r=request), file + \'$\')\n\n    return dict(app=app, controllers=controllers)\n\ndef keepalive():\n    return \'\'\n\ndef search():\n    keywords=request.vars.keywords or \'\'\n    app = get_app()\n    def match(filename,keywords):\n        filename=os.path.join(apath(app, r=request),filename)\n        if keywords in read_file(filename,\'rb\'):\n            return True\n        return False\n    path = apath(request.args[0], r=request)\n    files1 = glob(os.path.join(path,\'*/*.py\'))\n    files2 = glob(os.path.join(path,\'*/*.html\'))\n    files3 = glob(os.path.join(path,\'*/*/*.html\'))\n    files=[x[len(path)+1:].replace(\'\\\\\',\'/\') for x in files1+files2+files3 if match(x,keywords)]\n    return response.json({\'files\':files})\n\ndef edit():\n    """ File edit handler """\n    # Load json only if it is ajax edited...\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    # Try to discover the file type\n    if filename[-3:] == \'.py\':\n        filetype = \'python\'\n    elif filename[-5:] == \'.html\':\n        filetype = \'html\'\n    elif filename[-5:] == \'.load\':\n        filetype = \'html\'\n    elif filename[-4:] == \'.css\':\n        filetype = \'css\'\n    elif filename[-3:] == \'.js\':\n        filetype = \'js\'\n    else:\n        filetype = \'html\'\n\n    # ## check if file is not there\n\n    path = apath(filename, r=request)\n\n    if (\'revert\' in request.vars) and os.path.exists(path + \'.bak\'):\n        try:\n            data = safe_read(path + \'.bak\')\n            data1 = safe_read(path)\n        except IOError:\n            session.flash = T(\'Invalid action\')\n            if \'from_ajax\' in request.vars:\n                 return response.json({\'error\': str(T(\'Invalid action\'))})\n            else:\n                redirect(URL(\'site\'))\n\n        safe_write(path, data)\n        file_hash = md5_hash(data)\n        saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n        safe_write(path + \'.bak\', data1)\n        response.flash = T(\'file "%s" of %s restored\', (filename, saved_on))\n    else:\n        try:\n            data = safe_read(path)\n        except IOError:\n            session.flash = T(\'Invalid action\')\n            if \'from_ajax\' in request.vars:\n                return response.json({\'error\': str(T(\'Invalid action\'))})\n            else:\n                redirect(URL(\'site\'))\n\n        file_hash = md5_hash(data)\n        saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n\n        if request.vars.file_hash and request.vars.file_hash != file_hash:\n            session.flash = T(\'file changed on disk\')\n            data = request.vars.data.replace(\'\\r\\n\', \'\\n\').strip() + \'\\n\'\n            safe_write(path + \'.1\', data)\n            if \'from_ajax\' in request.vars:\n                return response.json({\'error\': str(T(\'file changed on disk\')),\n                                      \'redirect\': URL(\'resolve\',\n                                                      args=request.args)})\n            else:\n                redirect(URL(\'resolve\', args=request.args))\n        elif request.vars.data:\n            safe_write(path + \'.bak\', data)\n            data = request.vars.data.replace(\'\\r\\n\', \'\\n\').strip() + \'\\n\'\n            safe_write(path, data)\n            file_hash = md5_hash(data)\n            saved_on = time.ctime(os.stat(path)[stat.ST_MTIME])\n            response.flash = T(\'file saved on %s\', saved_on)\n\n    data_or_revert = (request.vars.data or request.vars.revert)\n\n    # Check compile errors\n    highlight = None\n    if filetype == \'python\' and request.vars.data:\n        import _ast\n        try:\n            code = request.vars.data.rstrip().replace(\'\\r\\n\',\'\\n\')+\'\\n\'\n            compile(code, path, "exec", _ast.PyCF_ONLY_AST)\n        except Exception, e:\n            start = sum([len(line)+1 for l, line\n                            in enumerate(request.vars.data.split("\\n"))\n                            if l < e.lineno-1])\n            if e.text and e.offset:\n                offset = e.offset - (len(e.text) - len(e.text.splitlines()[-1]))\n            else:\n                offset = 0\n            highlight = {\'start\': start, \'end\': start + offset + 1}\n            try:\n                ex_name = e.__class__.__name__\n            except:\n                ex_name = \'unknown exception!\'\n            response.flash = DIV(T(\'failed to compile file because:\'), BR(),\n                                 B(ex_name), T(\' at line %s\') % e.lineno,\n                                 offset and T(\' at char %s\') % offset or \'\',\n                                 PRE(str(e)))\n\n    if data_or_revert and request.args[1] == \'modules\':\n        # Lets try to reload the modules\n        try:\n            mopath = \'.\'.join(request.args[2:])[:-3]\n            exec \'import applications.%s.modules.%s\' % (request.args[0], mopath)\n            reload(sys.modules[\'applications.%s.modules.%s\'\n                    % (request.args[0], mopath)])\n        except Exception, e:\n            response.flash = DIV(T(\'failed to reload module because:\'),PRE(str(e)))\n\n    edit_controller = None\n    editviewlinks = None\n    view_link = None\n    if filetype == \'html\' and len(request.args) >= 3:\n        cfilename = os.path.join(request.args[0], \'controllers\',\n                                 request.args[2] + \'.py\')\n        if os.path.exists(apath(cfilename, r=request)):\n            edit_controller = URL(\'edit\', args=[cfilename])\n            view = request.args[3].replace(\'.html\',\'\')\n            view_link = URL(request.args[0],request.args[2],view)\n    elif filetype == \'python\' and request.args[1] == \'controllers\':\n        ## it\'s a controller file.\n        ## Create links to all of the associated view files.\n        app = get_app()\n        viewname = os.path.splitext(request.args[2])[0]\n        viewpath = os.path.join(app,\'views\',viewname)\n        aviewpath = apath(viewpath, r=request)\n        viewlist = []\n        if os.path.exists(aviewpath):\n            if os.path.isdir(aviewpath):\n                viewlist = glob(os.path.join(aviewpath,\'*.html\'))\n        elif os.path.exists(aviewpath+\'.html\'):\n            viewlist.append(aviewpath+\'.html\')\n        if len(viewlist):\n            editviewlinks = []\n            for v in viewlist:\n                vf = os.path.split(v)[-1]\n                vargs = "/".join([viewpath.replace(os.sep,"/"),vf])\n                editviewlinks.append(A(T(vf.split(".")[0]),\\\n                    _href=URL(\'edit\',args=[vargs])))\n\n    if len(request.args) > 2 and request.args[1] == \'controllers\':\n        controller = (request.args[2])[:-3]\n        functions = regex_expose.findall(data)\n    else:\n        (controller, functions) = (None, None)\n\n    if \'from_ajax\' in request.vars:\n        return response.json({\'file_hash\': file_hash, \'saved_on\': saved_on, \'functions\':functions, \'controller\': controller, \'application\': request.args[0], \'highlight\': highlight })\n    else:\n\n        editarea_preferences = {}\n        editarea_preferences[\'FONT_SIZE\'] = \'10\'\n        editarea_preferences[\'FULL_SCREEN\'] = \'false\'\n        editarea_preferences[\'ALLOW_TOGGLE\'] = \'true\'\n        editarea_preferences[\'REPLACE_TAB_BY_SPACES\'] = \'4\'\n        editarea_preferences[\'DISPLAY\'] = \'onload\'\n        for key in editarea_preferences:\n            if globals().has_key(key):\n                editarea_preferences[key]=globals()[key]\n        return dict(app=request.args[0],\n                    filename=filename,\n                    filetype=filetype,\n                    data=data,\n                    edit_controller=edit_controller,\n                    file_hash=file_hash,\n                    saved_on=saved_on,\n                    controller=controller,\n                    functions=functions,\n                    view_link=view_link,\n                    editarea_preferences=editarea_preferences,\n                    editviewlinks=editviewlinks)\n\ndef resolve():\n    """\n    """\n\n    filename = \'/\'.join(request.args)\n    # ## check if file is not there\n    path = apath(filename, r=request)\n    a = safe_read(path).split(\'\\n\')\n    try:\n        b = safe_read(path + \'.1\').split(\'\\n\')\n    except IOError:\n        session.flash = \'Other file, no longer there\'\n        redirect(URL(\'edit\', args=request.args))\n\n    d = difflib.ndiff(a, b)\n\n    def leading(line):\n        """  """\n\n        # TODO: we really need to comment this\n        z = \'\'\n        for (k, c) in enumerate(line):\n            if c == \' \':\n                z += \'&nbsp;\'\n            elif c == \' \\t\':\n                z += \'&nbsp;\'\n            elif k == 0 and c == \'?\':\n                pass\n            else:\n                break\n\n        return XML(z)\n\n    def getclass(item):\n        """ Determine item class """\n\n        if item[0] == \' \':\n            return \'normal\'\n        if item[0] == \'+\':\n            return \'plus\'\n        if item[0] == \'-\':\n            return \'minus\'\n\n    if request.vars:\n        c = \'\\n\'.join([item[2:].rstrip() for (i, item) in enumerate(d) if item[0] \\\n                           == \' \' or \'line%i\' % i in request.vars])\n        safe_write(path, c)\n        session.flash = \'files merged\'\n        redirect(URL(\'edit\', args=request.args))\n    else:\n        # Making the short circuit compatible with <= python2.4\n        gen_data = lambda index,item: not item[:1] in [\'+\',\'-\'] and "" \\\n                   or INPUT(_type=\'checkbox\',\n                            _name=\'line%i\' % index,\n                            value=item[0] == \'+\')\n\n        diff = TABLE(*[TR(TD(gen_data(i,item)),\n                          TD(item[0]),\n                          TD(leading(item[2:]),\n                          TT(item[2:].rstrip())), _class=getclass(item))\n                       for (i, item) in enumerate(d) if item[0] != \'?\'])\n\n    return dict(diff=diff, filename=filename)\n\n\ndef edit_language():\n    """ Edit language file """\n    app = get_app()\n    filename = \'/\'.join(request.args)\n    from gluon.languages import read_dict, write_dict\n    strings = read_dict(apath(filename, r=request))\n    keys = sorted(strings.keys(),lambda x,y: cmp(x.lower(), y.lower()))\n    rows = []\n    rows.append(H2(T(\'Original/Translation\')))\n\n    for key in keys:\n        name = md5_hash(key)\n        if key==strings[key]:\n            _class=\'untranslated\'\n        else:\n            _class=\'translated\'\n        if len(key) <= 40:\n            elem = INPUT(_type=\'text\', _name=name,value=strings[key],\n                         _size=70,_class=_class)\n        else:\n            elem = TEXTAREA(_name=name, value=strings[key], _cols=70,\n                            _rows=5, _class=_class)\n\n        # Making the short circuit compatible with <= python2.4\n        k = (strings[key] != key) and key or B(key)\n\n        rows.append(P(k, BR(), elem, TAG.BUTTON(T(\'delete\'),\n                            _onclick=\'return delkey("%s")\' % name), _id=name))\n\n    rows.append(INPUT(_type=\'submit\', _value=T(\'update\')))\n    form = FORM(*rows)\n    if form.accepts(request.vars, keepvalues=True):\n        strs = dict()\n        for key in keys:\n            name = md5_hash(key)\n            if form.vars[name]==chr(127): continue\n            strs[key] = form.vars[name]\n        write_dict(apath(filename, r=request), strs)\n        session.flash = T(\'file saved on %(time)s\', dict(time=time.ctime()))\n        redirect(URL(r=request,args=request.args))\n    return dict(app=request.args[0], filename=filename, form=form)\n\n\ndef about():\n    """ Read about info """\n    app = get_app()\n    # ## check if file is not there\n    about = safe_read(apath(\'%s/ABOUT\' % app, r=request))\n    license = safe_read(apath(\'%s/LICENSE\' % app, r=request))\n    return dict(app=app, about=MARKMIN(about), license=MARKMIN(license))\n\n\ndef design():\n    """ Application design handler """\n    app = get_app()\n\n    if not response.flash and app == request.application:\n        msg = T(\'ATTENTION: you cannot edit the running application!\')\n        response.flash = msg\n\n    if request.vars.pluginfile!=None and not isinstance(request.vars.pluginfile,str):\n        filename=os.path.basename(request.vars.pluginfile.filename)\n        if plugin_install(app, request.vars.pluginfile.file,\n                          request, filename):\n            session.flash = T(\'new plugin installed\')\n            redirect(URL(\'design\',args=app))\n        else:\n            session.flash = \\\n                T(\'unable to create application "%s"\', request.vars.filename)\n        redirect(URL(r=request))\n    elif isinstance(request.vars.pluginfile,str):\n        session.flash = T(\'plugin not specified\')\n        redirect(URL(r=request))\n\n\n    # If we have only pyc files it means that\n    # we cannot design\n    if os.path.exists(apath(\'%s/compiled\' % app, r=request)):\n        session.flash = \\\n            T(\'application is compiled and cannot be designed\')\n        redirect(URL(\'site\'))\n\n    # Get all models\n    models = listdir(apath(\'%s/models/\' % app, r=request), \'.*\\.py$\')\n    models=[x.replace(\'\\\\\',\'/\') for x in models]\n    defines = {}\n    for m in models:\n        data = safe_read(apath(\'%s/models/%s\' % (app, m), r=request))\n        defines[m] = regex_tables.findall(data)\n        defines[m].sort()\n\n    # Get all controllers\n    controllers = sorted(listdir(apath(\'%s/controllers/\' % app, r=request), \'.*\\.py$\'))\n    controllers = [x.replace(\'\\\\\',\'/\') for x in controllers]\n    functions = {}\n    for c in controllers:\n        data = safe_read(apath(\'%s/controllers/%s\' % (app, c), r=request))\n        items = regex_expose.findall(data)\n        functions[c] = items\n\n    # Get all views\n    views = sorted(listdir(apath(\'%s/views/\' % app, r=request), \'[\\w/\\-]+(\\.\\w+)+$\'))\n    views = [x.replace(\'\\\\\',\'/\') for x in views if not x.endswith(\'.bak\')]\n    extend = {}\n    include = {}\n    for c in views:\n        data = safe_read(apath(\'%s/views/%s\' % (app, c), r=request))\n        items = regex_extend.findall(data)\n\n        if items:\n            extend[c] = items[0][1]\n\n        items = regex_include.findall(data)\n        include[c] = [i[1] for i in items]\n\n    # Get all modules\n    modules = listdir(apath(\'%s/modules/\' % app, r=request), \'.*\\.py$\')\n    modules = modules=[x.replace(\'\\\\\',\'/\') for x in modules]\n    modules.sort()\n\n    # Get all static files\n    statics = listdir(apath(\'%s/static/\' % app, r=request), \'[^\\.#].*\')\n    statics = [x.replace(\'\\\\\',\'/\') for x in statics]\n    statics.sort()\n\n    # Get all languages\n    languages = listdir(apath(\'%s/languages/\' % app, r=request), \'[\\w-]*\\.py\')\n\n    #Get crontab\n    cronfolder = apath(\'%s/cron\' % app, r=request)\n    if not os.path.exists(cronfolder): os.mkdir(cronfolder)\n    crontab = apath(\'%s/cron/crontab\' % app, r=request)\n    if not os.path.exists(crontab):\n        safe_write(crontab, \'#crontab\')\n\n    plugins=[]\n    def filter_plugins(items,plugins):\n        plugins+=[item[7:].split(\'/\')[0].split(\'.\')[0] for item in items if item.startswith(\'plugin_\')]\n        plugins[:]=list(set(plugins))\n        plugins.sort()\n        return [item for item in items if not item.startswith(\'plugin_\')]\n\n    return dict(app=app,\n                models=filter_plugins(models,plugins),\n                defines=defines,\n                controllers=filter_plugins(controllers,plugins),\n                functions=functions,\n                views=filter_plugins(views,plugins),\n                modules=filter_plugins(modules,plugins),\n                extend=extend,\n                include=include,\n                statics=filter_plugins(statics,plugins),\n                languages=languages,\n                crontab=crontab,\n                plugins=plugins)\n\ndef delete_plugin():\n    """ Object delete handler """\n    app=request.args(0)\n    plugin = request.args(1)\n    plugin_name=\'plugin_\'+plugin\n    if \'nodelete\' in request.vars:\n        redirect(URL(\'design\',args=app))\n    elif \'delete\' in request.vars:\n        try:\n            for folder in [\'models\',\'views\',\'controllers\',\'static\',\'modules\']:\n                path=os.path.join(apath(app,r=request),folder)\n                for item in os.listdir(path):\n                    if item.rsplit(\'.\',1)[0] == plugin_name:\n                        filename=os.path.join(path,item)\n                        if os.path.isdir(filename):\n                            shutil.rmtree(filename)\n                        else:\n                            os.unlink(filename)\n            session.flash = T(\'plugin "%(plugin)s" deleted\',\n                              dict(plugin=plugin))\n        except Exception:\n            session.flash = T(\'unable to delete file plugin "%(plugin)s"\',\n                              dict(plugin=plugin))\n        redirect(URL(\'design\',args=request.args(0)))\n    return dict(plugin=plugin)\n\ndef plugin():\n    """ Application design handler """\n    app = get_app()\n    plugin = request.args(1)\n\n    if not response.flash and app == request.application:\n        msg = T(\'ATTENTION: you cannot edit the running application!\')\n        response.flash = msg\n\n    # If we have only pyc files it means that\n    # we cannot design\n    if os.path.exists(apath(\'%s/compiled\' % app, r=request)):\n        session.flash = \\\n            T(\'application is compiled and cannot be designed\')\n        redirect(URL(\'site\'))\n\n    # Get all models\n    models = listdir(apath(\'%s/models/\' % app, r=request), \'.*\\.py$\')\n    models=[x.replace(\'\\\\\',\'/\') for x in models]\n    defines = {}\n    for m in models:\n        data = safe_read(apath(\'%s/models/%s\' % (app, m), r=request))\n        defines[m] = regex_tables.findall(data)\n        defines[m].sort()\n\n    # Get all controllers\n    controllers = sorted(listdir(apath(\'%s/controllers/\' % app, r=request), \'.*\\.py$\'))\n    controllers = [x.replace(\'\\\\\',\'/\') for x in controllers]\n    functions = {}\n    for c in controllers:\n        data = safe_read(apath(\'%s/controllers/%s\' % (app, c), r=request))\n        items = regex_expose.findall(data)\n        functions[c] = items\n\n    # Get all views\n    views = sorted(listdir(apath(\'%s/views/\' % app, r=request), \'[\\w/\\-]+\\.\\w+$\'))\n    views = [x.replace(\'\\\\\',\'/\') for x in views]\n    extend = {}\n    include = {}\n    for c in views:\n        data = safe_read(apath(\'%s/views/%s\' % (app, c), r=request))\n        items = regex_extend.findall(data)\n        if items:\n            extend[c] = items[0][1]\n\n        items = regex_include.findall(data)\n        include[c] = [i[1] for i in items]\n\n    # Get all modules\n    modules = listdir(apath(\'%s/modules/\' % app, r=request), \'.*\\.py$\')\n    modules = modules=[x.replace(\'\\\\\',\'/\') for x in modules]\n    modules.sort()\n\n    # Get all static files\n    statics = listdir(apath(\'%s/static/\' % app, r=request), \'[^\\.#].*\')\n    statics = [x.replace(\'\\\\\',\'/\') for x in statics]\n    statics.sort()\n\n    # Get all languages\n    languages = listdir(apath(\'%s/languages/\' % app, r=request), \'[\\w-]*\\.py\')\n\n    #Get crontab\n    crontab = apath(\'%s/cron/crontab\' % app, r=request)\n    if not os.path.exists(crontab):\n        safe_write(crontab, \'#crontab\')\n\n    def filter_plugins(items):\n        regex=re.compile(\'^plugin_\'+plugin+\'(/.*|\\..*)?$\')\n        return [item for item in items if regex.match(item)]\n\n    return dict(app=app,\n                models=filter_plugins(models),\n                defines=defines,\n                controllers=filter_plugins(controllers),\n                functions=functions,\n                views=filter_plugins(views),\n                modules=filter_plugins(modules),\n                extend=extend,\n                include=include,\n                statics=filter_plugins(statics),\n                languages=languages,\n                crontab=crontab)\n\n\ndef create_file():\n    """ Create files handler """\n    try:\n        app = get_app(name=request.vars.location.split(\'/\')[0])\n        path = apath(request.vars.location, r=request)\n        filename = re.sub(\'[^\\w./-]+\', \'_\', request.vars.filename)\n\n        if path[-11:] == \'/languages/\':\n            # Handle language files\n            if len(filename) == 0:\n                raise SyntaxError\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n            app = path.split(\'/\')[-3]\n            path=os.path.join(apath(app, r=request),\'languages\',filename)\n            if not os.path.exists(path):\n                safe_write(path, \'\')\n            findT(apath(app, r=request), filename[:-3])\n            session.flash = T(\'language file "%(filename)s" created/updated\',\n                              dict(filename=filename))\n            redirect(request.vars.sender)\n\n        elif path[-8:] == \'/models/\':\n            # Handle python models\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = \'# coding: utf8\\n\'\n\n        elif path[-13:] == \'/controllers/\':\n            # Handle python controllers\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = \'# coding: utf8\\n# %s\\ndef index(): return dict(message="hello from %s")\'\n            text = text % (T(\'try something like\'), filename)\n\n        elif path[-7:] == \'/views/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            # Handle template (html) views\n            if filename.find(\'.\')<0:\n                filename += \'.html\'\n            extension = filename.split(\'.\')[-1].lower()\n\n            if len(filename) == 5:\n                raise SyntaxError\n\n            msg = T(\'This is the %(filename)s template\',\n                    dict(filename=filename))\n            if extension == \'html\':\n                text = dedent("""\n                   {{extend \'layout.html\'}}\n                   <h1>%s</h1>\n                   {{=BEAUTIFY(response._vars)}}""" % msg)\n            else:\n                generic = os.path.join(path,\'generic.\'+extension)\n                if os.path.exists(generic):\n                    text = read_file(generic)\n                else:\n                    text = \'\'\n\n        elif path[-9:] == \'/modules/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            # Handle python module files\n            if not filename[-3:] == \'.py\':\n                filename += \'.py\'\n\n            if len(filename) == 3:\n                raise SyntaxError\n\n            text = dedent("""\n                   #!/usr/bin/env python\n                   # coding: utf8\n                   from gluon import *\\n""")\n\n        elif path[-8:] == \'/static/\':\n            if request.vars.plugin and not filename.startswith(\'plugin_%s/\' % request.vars.plugin):\n                filename = \'plugin_%s/%s\' % (request.vars.plugin, filename)\n            text = \'\'\n        else:\n            redirect(request.vars.sender)\n\n        full_filename = os.path.join(path, filename)\n        dirpath = os.path.dirname(full_filename)\n\n        if not os.path.exists(dirpath):\n            os.makedirs(dirpath)\n\n        if os.path.exists(full_filename):\n            raise SyntaxError\n\n        safe_write(full_filename, text)\n        session.flash = T(\'file "%(filename)s" created\',\n                          dict(filename=full_filename[len(path):]))\n        redirect(URL(\'edit\',\n                 args=[os.path.join(request.vars.location, filename)]))\n    except Exception, e:\n        if not isinstance(e,HTTP):\n            session.flash = T(\'cannot create file\')\n\n    redirect(request.vars.sender)\n\n\ndef upload_file():\n    """ File uploading handler """\n\n    try:\n        filename = None\n        app = get_app(name=request.vars.location.split(\'/\')[0])\n        path = apath(request.vars.location, r=request)\n\n        if request.vars.filename:\n            filename = re.sub(\'[^\\w\\./]+\', \'_\', request.vars.filename)\n        else:\n            filename = os.path.split(request.vars.file.filename)[-1]\n\n        if path[-8:] == \'/models/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-9:] == \'/modules/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-13:] == \'/controllers/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        if path[-7:] == \'/views/\' and not filename[-5:] == \'.html\':\n            filename += \'.html\'\n\n        if path[-11:] == \'/languages/\' and not filename[-3:] == \'.py\':\n            filename += \'.py\'\n\n        filename = os.path.join(path, filename)\n        dirpath = os.path.dirname(filename)\n\n        if not os.path.exists(dirpath):\n            os.makedirs(dirpath)\n\n        safe_write(filename, request.vars.file.file.read(), \'wb\')\n        session.flash = T(\'file "%(filename)s" uploaded\',\n                          dict(filename=filename[len(path):]))\n    except Exception:\n        if filename:\n            d = dict(filename = filename[len(path):])\n        else:\n            d = dict(filename = \'unkown\')\n        session.flash = T(\'cannot upload file "%(filename)s"\', d)\n\n    redirect(request.vars.sender)\n\n\ndef errors():\n    """ Error handler """\n    import operator\n    import os\n    import pickle\n    import hashlib\n\n    app = get_app()\n\n    method = request.args(1) or \'new\'\n    db_ready = {}\n    db_ready[\'status\'] = get_ticket_storage(app)\n    db_ready[\'errmessage\'] = "No ticket_storage.txt found under /private folder"\n    db_ready[\'errlink\'] = "http://web2py.com/books/default/chapter/29/13#Collecting-tickets"\n\n    if method == \'new\':\n        errors_path = apath(\'%s/errors\' % app, r=request)\n\n        delete_hashes = []\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                delete_hashes.append(item[7:])\n\n        hash2error = dict()\n\n        for fn in listdir(errors_path, \'^\\w.*\'):\n            fullpath = os.path.join(errors_path, fn)\n            if not os.path.isfile(fullpath): continue\n            try:\n                fullpath_file = open(fullpath, \'r\')\n                try:\n                    error = pickle.load(fullpath_file)\n                finally:\n                    fullpath_file.close()\n            except IOError:\n                continue\n\n            hash = hashlib.md5(error[\'traceback\']).hexdigest()\n\n            if hash in delete_hashes:\n                os.unlink(fullpath)\n            else:\n                try:\n                    hash2error[hash][\'count\'] += 1\n                except KeyError:\n                    error_lines = error[\'traceback\'].split("\\n")\n                    last_line = error_lines[-2]\n                    error_causer = os.path.split(error[\'layer\'])[1]\n                    hash2error[hash] = dict(count=1, pickel=error,\n                                            causer=error_causer,\n                                            last_line=last_line,\n                                            hash=hash,ticket=fn)\n\n        decorated = [(x[\'count\'], x) for x in hash2error.values()]\n        decorated.sort(key=operator.itemgetter(0), reverse=True)\n\n        return dict(errors = [x[1] for x in decorated], app=app, method=method, db_ready=db_ready)\n\n    elif method == \'dbnew\':\n        errors_path = apath(\'%s/errors\' % app, r=request)\n        tk_db, tk_table = get_ticket_storage(app)\n\n        delete_hashes = []\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                delete_hashes.append(item[7:])\n\n        hash2error = dict()\n\n        for fn in tk_db(tk_table.id>0).select():\n            try:\n                error = pickle.loads(fn.ticket_data)\n            except AttributeError:\n                tk_db(tk_table.id == fn.id).delete()\n                tk_db.commit()\n\n            hash = hashlib.md5(error[\'traceback\']).hexdigest()\n\n            if hash in delete_hashes:\n                tk_db(tk_table.id == fn.id).delete()\n                tk_db.commit()\n            else:\n                try:\n                    hash2error[\'hash\'][\'count\'] += 1\n                except KeyError:\n                    error_lines = error[\'traceback\'].split("\\n")\n                    last_line = error_lines[-2]\n                    error_causer = os.path.split(error[\'layer\'])[1]\n                    hash2error[hash] = dict(count=1, pickel=error,\n                                            causer=error_causer,\n                                            last_line=last_line,\n                                            hash=hash,ticket=fn.ticket_id)\n\n        decorated = [(x[\'count\'], x) for x in hash2error.values()]\n\n        decorated.sort(key=operator.itemgetter(0), reverse=True)\n\n        return dict(errors = [x[1] for x in decorated], app=app, method=method)\n\n    elif method == \'dbold\':\n        tk_db, tk_table = get_ticket_storage(app)\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                tk_db(tk_table.ticket_id == item[7:]).delete()\n                tk_db.commit()\n        tickets_ = tk_db(tk_table.id>0).select(tk_table.ticket_id, tk_table.created_datetime, orderby=~tk_table.created_datetime)\n        tickets = [row.ticket_id for row in tickets_]\n        times = dict([(row.ticket_id, row.created_datetime) for row in tickets_])\n\n        return dict(app=app, tickets=tickets, method=method, times=times)\n\n    else:\n        for item in request.vars:\n            if item[:7] == \'delete_\':\n                os.unlink(apath(\'%s/errors/%s\' % (app, item[7:]), r=request))\n        func = lambda p: os.stat(apath(\'%s/errors/%s\' % \\\n                                           (app, p), r=request)).st_mtime\n        tickets = sorted(listdir(apath(\'%s/errors/\' % app, r=request), \'^\\w.*\'),\n                         key=func,\n                         reverse=True)\n\n        return dict(app=app, tickets=tickets, method=method, db_ready=db_ready)\n\ndef get_ticket_storage(app):\n    private_folder = apath(\'%s/private\' % app, r=request)\n    ticket_file = os.path.join(private_folder, \'ticket_storage.txt\')\n    if os.path.exists(ticket_file):\n        db_string = open(ticket_file).read()\n        db_string = db_string.strip().replace(\'\\r\',\'\').replace(\'\\n\',\'\')\n    else:\n        return False\n    tickets_table = \'web2py_ticket\'\n    tablename = tickets_table + \'_\' + app\n    db_path = apath(\'%s/databases\' % app, r=request)\n    ticketsdb = DAL(db_string, folder=db_path, auto_import=True)\n    if not ticketsdb.get(tablename):\n        table = ticketsdb.define_table(\n                tablename,\n                Field(\'ticket_id\', length=100),\n                Field(\'ticket_data\', \'text\'),\n                Field(\'created_datetime\', \'datetime\'),\n                )\n    return ticketsdb , ticketsdb.get(tablename)\n\ndef make_link(path):\n    """ Create a link from a path """\n    tryFile = path.replace(\'\\\\\', \'/\')\n\n    if os.path.isabs(tryFile) and os.path.isfile(tryFile):\n        (folder, filename) = os.path.split(tryFile)\n        (base, ext) = os.path.splitext(filename)\n        app = get_app()\n\n        editable = {\'controllers\': \'.py\', \'models\': \'.py\', \'views\': \'.html\'}\n        for key in editable.keys():\n            check_extension = folder.endswith("%s/%s" % (app,key))\n            if ext.lower() == editable[key] and check_extension:\n                return A(\'"\' + tryFile + \'"\',\n                         _href=URL(r=request,\n                         f=\'edit/%s/%s/%s\' % (app, key, filename))).xml()\n    return \'\'\n\n\ndef make_links(traceback):\n    """ Make links using the given traceback """\n\n    lwords = traceback.split(\'"\')\n\n    # Making the short circuit compatible with <= python2.4\n    result = (len(lwords) != 0) and lwords[0] or \'\'\n\n    i = 1\n\n    while i < len(lwords):\n        link = make_link(lwords[i])\n\n        if link == \'\':\n            result += \'"\' + lwords[i]\n        else:\n            result += link\n\n            if i + 1 < len(lwords):\n                result += lwords[i + 1]\n                i = i + 1\n\n        i = i + 1\n\n    return result\n\n\nclass TRACEBACK(object):\n    """ Generate the traceback """\n\n    def __init__(self, text):\n        """ TRACEBACK constructor """\n\n        self.s = make_links(CODE(text).xml())\n\n    def xml(self):\n        """ Returns the xml """\n\n        return self.s\n\n\ndef ticket():\n    """ Ticket handler """\n\n    if len(request.args) != 2:\n        session.flash = T(\'invalid ticket\')\n        redirect(URL(\'site\'))\n\n    app = get_app()\n    myversion = request.env.web2py_version\n    ticket = request.args[1]\n    e = RestrictedError()\n    e.load(request, app, ticket)\n\n    return dict(app=app,\n                ticket=ticket,\n                output=e.output,\n                traceback=(e.traceback and TRACEBACK(e.traceback)),\n                snapshot=e.snapshot,\n                code=e.code,\n                layer=e.layer,\n                myversion=myversion)\n\ndef ticketdb():\n    """ Ticket handler """\n\n    if len(request.args) != 2:\n        session.flash = T(\'invalid ticket\')\n        redirect(URL(\'site\'))\n\n    app = get_app()\n    myversion = request.env.web2py_version\n    ticket = request.args[1]\n    e = RestrictedError()\n    request.tickets_db = get_ticket_storage(app)[0]\n    e.load(request, app, ticket)\n    response.view = \'default/ticket.html\'\n    return dict(app=app,\n                ticket=ticket,\n                output=e.output,\n                traceback=(e.traceback and TRACEBACK(e.traceback)),\n                snapshot=e.snapshot,\n                code=e.code,\n                layer=e.layer,\n                myversion=myversion)\n\ndef error():\n    """ Generate a ticket (for testing) """\n    raise RuntimeError(\'admin ticket generator at your service\')\n\ndef update_languages():\n    """ Update available languages """\n\n    app = get_app()\n    update_all_languages(apath(app, r=request))\n    session.flash = T(\'Language files (static strings) updated\')\n    redirect(URL(\'design\',args=app,anchor=\'languages\'))\n\n\ndef twitter():\n    session.forget()\n    session._unlock(response)\n    import gluon.tools\n    import gluon.contrib.simplejson as sj\n    try:\n        if TWITTER_HASH:\n            page = urllib.urlopen("http://search.twitter.com/search.json?q=%%40%s" % TWITTER_HASH).read()\n            data = sj.loads(page  , encoding="utf-8")[\'results\']\n            d = dict()\n            for e in data:\n                d[e["id"]] = e\n            r = reversed(sorted(d))\n            return dict(tweets = [d[k] for k in r])\n        else:\n            return \'disabled\'\n    except Exception, e:\n        return DIV(T(\'Unable to download because:\'),BR(),str(e))\n\n\ndef user():\n    if MULTI_USER_MODE:\n        if not db(db.auth_user).count():\n            auth.settings.registration_requires_approval = False\n        return dict(form=auth())\n    else:\n        return dict(form=T("Disabled"))\n\ndef reload_routes():\n    """ Reload routes.py """\n    import gluon.rewrite\n    gluon.rewrite.load()\n    redirect(URL(\'site\'))\n\n\n\nresponse._vars=response._caller(check_version)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__hash__'
p12
S"<method-wrapper '__hash__' of exceptions.TypeError object at 0x06821F80>"
p13
sS'__setattr__'
p14
S"<method-wrapper '__setattr__' of exceptions.TypeError object at 0x06821F80>"
p15
sS'__reduce_ex__'
p16
S'<built-in method __reduce_ex__ of exceptions.TypeError object at 0x06821F80>'
p17
sS'__getslice__'
p18
S"<method-wrapper '__getslice__' of exceptions.TypeError object at 0x06821F80>"
p19
sS'__getitem__'
p20
S"<method-wrapper '__getitem__' of exceptions.TypeError object at 0x06821F80>"
p21
sS'__setstate__'
p22
S'<built-in method __setstate__ of exceptions.TypeError object at 0x06821F80>'
p23
sS'__reduce__'
p24
S'<built-in method __reduce__ of exceptions.TypeError object at 0x06821F80>'
p25
sS'__str__'
p26
S"<method-wrapper '__str__' of exceptions.TypeError object at 0x06821F80>"
p27
sS'args'
p28
S"('not all arguments converted during string formatting',)"
p29
sS'__getattribute__'
p30
S"<method-wrapper '__getattribute__' of exceptions.TypeError object at 0x06821F80>"
p31
sS'__class__'
p32
S"<type 'exceptions.TypeError'>"
p33
sS'__delattr__'
p34
S"<method-wrapper '__delattr__' of exceptions.TypeError object at 0x06821F80>"
p35
sS'__repr__'
p36
S"<method-wrapper '__repr__' of exceptions.TypeError object at 0x06821F80>"
p37
sS'__dict__'
p38
S'{}'
p39
sS'__doc__'
p40
S"'Inappropriate argument type.'"
p41
sS'__init__'
p42
S"<method-wrapper '__init__' of exceptions.TypeError object at 0x06821F80>"
p43
sS'__new__'
p44
S'<built-in method __new__ of type object at 0x1E1CCD78>'
p45
ssS'evalue'
p46
S'not all arguments converted during string formatting'
p47
sS'request'
p48
ccopy_reg
_reconstructor
p49
(cgluon.html
BEAUTIFY
p50
c__builtin__
object
p51
NtRp52
(dp53
S'attributes'
p54
(dp55
sS'components'
p56
(lp57
g49
(cgluon.html
TABLE
p58
g51
NtRp59
(dp60
g54
(dp61
S'level'
p62
I5
ssS'parent'
p63
Nsg56
(lp64
g49
(cgluon.html
TR
p65
g51
NtRp66
(dp67
g54
(dp68
sg63
g59
sg56
(lp69
g49
(cgluon.html
TD
p70
g51
NtRp71
(dp72
g54
(dp73
S'_style'
p74
S'font-weight:bold;vertical-align:top'
p75
ssg63
g66
sg56
(lp76
S'ajax'
p77
asbag49
(g70
g51
NtRp78
(dp79
g54
(dp80
S'_valign'
p81
S'top'
p82
ssg63
g66
sg56
(lp83
S':'
asbag49
(g70
g51
NtRp84
(dp85
g54
(dp86
sg63
g66
sg56
(lp87
g49
(g50
g51
NtRp88
(dp89
g54
(dp90
g62
I5
ssg63
g84
sg56
(lp91
S'True'
p92
asbasbasbag49
(g65
g51
NtRp93
(dp94
g54
(dp95
sg63
g59
sg56
(lp96
g49
(g70
g51
NtRp97
(dp98
g54
(dp99
g74
g75
ssg63
g93
sg56
(lp100
S'application'
p101
asbag49
(g70
g51
NtRp102
(dp103
g54
(dp104
g81
g82
ssg63
g93
sg56
(lp105
S':'
asbag49
(g70
g51
NtRp106
(dp107
g54
(dp108
sg63
g93
sg56
(lp109
g49
(g50
g51
NtRp110
(dp111
g54
(dp112
g62
I5
ssg63
g106
sg56
(lp113
S'admin'
p114
asbasbasbag49
(g65
g51
NtRp115
(dp116
g54
(dp117
sg63
g59
sg56
(lp118
g49
(g70
g51
NtRp119
(dp120
g54
(dp121
g74
g75
ssg63
g115
sg56
(lp122
g28
asbag49
(g70
g51
NtRp123
(dp124
g54
(dp125
g81
g82
ssg63
g115
sg56
(lp126
S':'
asbag49
(g70
g51
NtRp127
(dp128
g54
(dp129
sg63
g115
sg56
(lp130
g49
(g50
g51
NtRp131
(dp132
g54
(dp133
g62
I5
ssg63
g127
sg56
(lp134
g49
(g58
g51
NtRp135
(dp136
g54
(dp137
g62
I4
ssg63
Nsg56
(lp138
sbasbasbasbag49
(g65
g51
NtRp139
(dp140
g54
(dp141
sg63
g59
sg56
(lp142
g49
(g70
g51
NtRp143
(dp144
g54
(dp145
g74
g75
ssg63
g139
sg56
(lp146
S'body'
p147
asbag49
(g70
g51
NtRp148
(dp149
g54
(dp150
g81
g82
ssg63
g139
sg56
(lp151
S':'
asbag49
(g70
g51
NtRp152
(dp153
g54
(dp154
sg63
g139
sg56
(lp155
g49
(g50
g51
NtRp156
(dp157
g54
(dp158
g62
I5
ssg63
g152
sg56
(lp159
S"<open file '<fdopen>', mode 'w+b' at 0x03213140>"
p160
asbasbasbag49
(g65
g51
NtRp161
(dp162
g54
(dp163
sg63
g59
sg56
(lp164
g49
(g70
g51
NtRp165
(dp166
g54
(dp167
g74
g75
ssg63
g161
sg56
(lp168
S'client'
p169
asbag49
(g70
g51
NtRp170
(dp171
g54
(dp172
g81
g82
ssg63
g161
sg56
(lp173
S':'
asbag49
(g70
g51
NtRp174
(dp175
g54
(dp176
sg63
g161
sg56
(lp177
g49
(g50
g51
NtRp178
(dp179
g54
(dp180
g62
I5
ssg63
g174
sg56
(lp181
S'127.0.0.1'
p182
asbasbasbag49
(g65
g51
NtRp183
(dp184
g54
(dp185
sg63
g59
sg56
(lp186
g49
(g70
g51
NtRp187
(dp188
g54
(dp189
g74
g75
ssg63
g183
sg56
(lp190
S'controller'
p191
asbag49
(g70
g51
NtRp192
(dp193
g54
(dp194
g81
g82
ssg63
g183
sg56
(lp195
S':'
asbag49
(g70
g51
NtRp196
(dp197
g54
(dp198
sg63
g183
sg56
(lp199
g49
(g50
g51
NtRp200
(dp201
g54
(dp202
g62
I5
ssg63
g196
sg56
(lp203
S'default'
p204
asbasbasbag49
(g65
g51
NtRp205
(dp206
g54
(dp207
sg63
g59
sg56
(lp208
g49
(g70
g51
NtRp209
(dp210
g54
(dp211
g74
g75
ssg63
g205
sg56
(lp212
S'cookies'
p213
asbag49
(g70
g51
NtRp214
(dp215
g54
(dp216
g81
g82
ssg63
g205
sg56
(lp217
S':'
asbag49
(g70
g51
NtRp218
(dp219
g54
(dp220
sg63
g205
sg56
(lp221
g49
(g50
g51
NtRp222
(dp223
g54
(dp224
g62
I5
ssg63
g218
sg56
(lp225
g49
(g58
g51
NtRp226
(dp227
g54
(dp228
g62
I4
ssg63
Nsg56
(lp229
g49
(g65
g51
NtRp230
(dp231
g54
(dp232
sg63
g226
sg56
(lp233
g49
(g70
g51
NtRp234
(dp235
g54
(dp236
g74
g75
ssg63
g230
sg56
(lp237
S'session_id_admin'
p238
asbag49
(g70
g51
NtRp239
(dp240
g54
(dp241
g81
g82
ssg63
g230
sg56
(lp242
S':'
asbag49
(g70
g51
NtRp243
(dp244
g54
(dp245
sg63
g230
sg56
(lp246
g49
(g50
g51
NtRp247
(dp248
g54
(dp249
g62
I4
ssg63
g243
sg56
(lp250
g49
(g58
g51
NtRp251
(dp252
g54
(dp253
g62
I3
ssg63
Nsg56
(lp254
g49
(g65
g51
NtRp255
(dp256
g54
(dp257
sg63
g251
sg56
(lp258
g49
(g70
g51
NtRp259
(dp260
g54
(dp261
g74
g75
ssg63
g255
sg56
(lp262
S'comment'
p263
asbag49
(g70
g51
NtRp264
(dp265
g54
(dp266
g81
g82
ssg63
g255
sg56
(lp267
S':'
asbag49
(g70
g51
NtRp268
(dp269
g54
(dp270
sg63
g255
sg56
(lp271
g49
(g50
g51
NtRp272
(dp273
g54
(dp274
g62
I3
ssg63
g268
sg56
(lp275
S''
asbasbasbag49
(g65
g51
NtRp276
(dp277
g54
(dp278
sg63
g251
sg56
(lp279
g49
(g70
g51
NtRp280
(dp281
g54
(dp282
g74
g75
ssg63
g276
sg56
(lp283
S'domain'
p284
asbag49
(g70
g51
NtRp285
(dp286
g54
(dp287
g81
g82
ssg63
g276
sg56
(lp288
S':'
asbag49
(g70
g51
NtRp289
(dp290
g54
(dp291
sg63
g276
sg56
(lp292
g49
(g50
g51
NtRp293
(dp294
g54
(dp295
g62
I3
ssg63
g289
sg56
(lp296
S''
asbasbasbag49
(g65
g51
NtRp297
(dp298
g54
(dp299
sg63
g251
sg56
(lp300
g49
(g70
g51
NtRp301
(dp302
g54
(dp303
g74
g75
ssg63
g297
sg56
(lp304
S'expires'
p305
asbag49
(g70
g51
NtRp306
(dp307
g54
(dp308
g81
g82
ssg63
g297
sg56
(lp309
S':'
asbag49
(g70
g51
NtRp310
(dp311
g54
(dp312
sg63
g297
sg56
(lp313
g49
(g50
g51
NtRp314
(dp315
g54
(dp316
g62
I3
ssg63
g310
sg56
(lp317
S''
asbasbasbag49
(g65
g51
NtRp318
(dp319
g54
(dp320
sg63
g251
sg56
(lp321
g49
(g70
g51
NtRp322
(dp323
g54
(dp324
g74
g75
ssg63
g318
sg56
(lp325
S'max-age'
p326
asbag49
(g70
g51
NtRp327
(dp328
g54
(dp329
g81
g82
ssg63
g318
sg56
(lp330
S':'
asbag49
(g70
g51
NtRp331
(dp332
g54
(dp333
sg63
g318
sg56
(lp334
g49
(g50
g51
NtRp335
(dp336
g54
(dp337
g62
I3
ssg63
g331
sg56
(lp338
S''
asbasbasbag49
(g65
g51
NtRp339
(dp340
g54
(dp341
sg63
g251
sg56
(lp342
g49
(g70
g51
NtRp343
(dp344
g54
(dp345
g74
g75
ssg63
g339
sg56
(lp346
S'path'
p347
asbag49
(g70
g51
NtRp348
(dp349
g54
(dp350
g81
g82
ssg63
g339
sg56
(lp351
S':'
asbag49
(g70
g51
NtRp352
(dp353
g54
(dp354
sg63
g339
sg56
(lp355
g49
(g50
g51
NtRp356
(dp357
g54
(dp358
g62
I3
ssg63
g352
sg56
(lp359
S''
asbasbasbag49
(g65
g51
NtRp360
(dp361
g54
(dp362
sg63
g251
sg56
(lp363
g49
(g70
g51
NtRp364
(dp365
g54
(dp366
g74
g75
ssg63
g360
sg56
(lp367
S'secure'
p368
asbag49
(g70
g51
NtRp369
(dp370
g54
(dp371
g81
g82
ssg63
g360
sg56
(lp372
S':'
asbag49
(g70
g51
NtRp373
(dp374
g54
(dp375
sg63
g360
sg56
(lp376
g49
(g50
g51
NtRp377
(dp378
g54
(dp379
g62
I3
ssg63
g373
sg56
(lp380
S''
asbasbasbag49
(g65
g51
NtRp381
(dp382
g54
(dp383
sg63
g251
sg56
(lp384
g49
(g70
g51
NtRp385
(dp386
g54
(dp387
g74
g75
ssg63
g381
sg56
(lp388
S'version'
p389
asbag49
(g70
g51
NtRp390
(dp391
g54
(dp392
g81
g82
ssg63
g381
sg56
(lp393
S':'
asbag49
(g70
g51
NtRp394
(dp395
g54
(dp396
sg63
g381
sg56
(lp397
g49
(g50
g51
NtRp398
(dp399
g54
(dp400
g62
I3
ssg63
g394
sg56
(lp401
S''
asbasbasbasbasbasbasbag49
(g65
g51
NtRp402
(dp403
g54
(dp404
sg63
g226
sg56
(lp405
g49
(g70
g51
NtRp406
(dp407
g54
(dp408
g74
g75
ssg63
g402
sg56
(lp409
S'session_id_welcome'
p410
asbag49
(g70
g51
NtRp411
(dp412
g54
(dp413
g81
g82
ssg63
g402
sg56
(lp414
S':'
asbag49
(g70
g51
NtRp415
(dp416
g54
(dp417
sg63
g402
sg56
(lp418
g49
(g50
g51
NtRp419
(dp420
g54
(dp421
g62
I4
ssg63
g415
sg56
(lp422
g49
(g58
g51
NtRp423
(dp424
g54
(dp425
g62
I3
ssg63
Nsg56
(lp426
g49
(g65
g51
NtRp427
(dp428
g54
(dp429
sg63
g423
sg56
(lp430
g49
(g70
g51
NtRp431
(dp432
g54
(dp433
g74
g75
ssg63
g427
sg56
(lp434
g263
asbag49
(g70
g51
NtRp435
(dp436
g54
(dp437
g81
g82
ssg63
g427
sg56
(lp438
S':'
asbag49
(g70
g51
NtRp439
(dp440
g54
(dp441
sg63
g427
sg56
(lp442
g49
(g50
g51
NtRp443
(dp444
g54
(dp445
g62
I3
ssg63
g439
sg56
(lp446
S''
asbasbasbag49
(g65
g51
NtRp447
(dp448
g54
(dp449
sg63
g423
sg56
(lp450
g49
(g70
g51
NtRp451
(dp452
g54
(dp453
g74
g75
ssg63
g447
sg56
(lp454
g284
asbag49
(g70
g51
NtRp455
(dp456
g54
(dp457
g81
g82
ssg63
g447
sg56
(lp458
S':'
asbag49
(g70
g51
NtRp459
(dp460
g54
(dp461
sg63
g447
sg56
(lp462
g49
(g50
g51
NtRp463
(dp464
g54
(dp465
g62
I3
ssg63
g459
sg56
(lp466
S''
asbasbasbag49
(g65
g51
NtRp467
(dp468
g54
(dp469
sg63
g423
sg56
(lp470
g49
(g70
g51
NtRp471
(dp472
g54
(dp473
g74
g75
ssg63
g467
sg56
(lp474
g305
asbag49
(g70
g51
NtRp475
(dp476
g54
(dp477
g81
g82
ssg63
g467
sg56
(lp478
S':'
asbag49
(g70
g51
NtRp479
(dp480
g54
(dp481
sg63
g467
sg56
(lp482
g49
(g50
g51
NtRp483
(dp484
g54
(dp485
g62
I3
ssg63
g479
sg56
(lp486
S''
asbasbasbag49
(g65
g51
NtRp487
(dp488
g54
(dp489
sg63
g423
sg56
(lp490
g49
(g70
g51
NtRp491
(dp492
g54
(dp493
g74
g75
ssg63
g487
sg56
(lp494
g326
asbag49
(g70
g51
NtRp495
(dp496
g54
(dp497
g81
g82
ssg63
g487
sg56
(lp498
S':'
asbag49
(g70
g51
NtRp499
(dp500
g54
(dp501
sg63
g487
sg56
(lp502
g49
(g50
g51
NtRp503
(dp504
g54
(dp505
g62
I3
ssg63
g499
sg56
(lp506
S''
asbasbasbag49
(g65
g51
NtRp507
(dp508
g54
(dp509
sg63
g423
sg56
(lp510
g49
(g70
g51
NtRp511
(dp512
g54
(dp513
g74
g75
ssg63
g507
sg56
(lp514
g347
asbag49
(g70
g51
NtRp515
(dp516
g54
(dp517
g81
g82
ssg63
g507
sg56
(lp518
S':'
asbag49
(g70
g51
NtRp519
(dp520
g54
(dp521
sg63
g507
sg56
(lp522
g49
(g50
g51
NtRp523
(dp524
g54
(dp525
g62
I3
ssg63
g519
sg56
(lp526
S''
asbasbasbag49
(g65
g51
NtRp527
(dp528
g54
(dp529
sg63
g423
sg56
(lp530
g49
(g70
g51
NtRp531
(dp532
g54
(dp533
g74
g75
ssg63
g527
sg56
(lp534
g368
asbag49
(g70
g51
NtRp535
(dp536
g54
(dp537
g81
g82
ssg63
g527
sg56
(lp538
S':'
asbag49
(g70
g51
NtRp539
(dp540
g54
(dp541
sg63
g527
sg56
(lp542
g49
(g50
g51
NtRp543
(dp544
g54
(dp545
g62
I3
ssg63
g539
sg56
(lp546
S''
asbasbasbag49
(g65
g51
NtRp547
(dp548
g54
(dp549
sg63
g423
sg56
(lp550
g49
(g70
g51
NtRp551
(dp552
g54
(dp553
g74
g75
ssg63
g547
sg56
(lp554
g389
asbag49
(g70
g51
NtRp555
(dp556
g54
(dp557
g81
g82
ssg63
g547
sg56
(lp558
S':'
asbag49
(g70
g51
NtRp559
(dp560
g54
(dp561
sg63
g547
sg56
(lp562
g49
(g50
g51
NtRp563
(dp564
g54
(dp565
g62
I3
ssg63
g559
sg56
(lp566
S''
asbasbasbasbasbasbasbasbasbasbasbag49
(g65
g51
NtRp567
(dp568
g54
(dp569
sg63
g59
sg56
(lp570
g49
(g70
g51
NtRp571
(dp572
g54
(dp573
g74
g75
ssg63
g567
sg56
(lp574
S'env'
p575
asbag49
(g70
g51
NtRp576
(dp577
g54
(dp578
g81
g82
ssg63
g567
sg56
(lp579
S':'
asbag49
(g70
g51
NtRp580
(dp581
g54
(dp582
sg63
g567
sg56
(lp583
g49
(g50
g51
NtRp584
(dp585
g54
(dp586
g62
I5
ssg63
g580
sg56
(lp587
g49
(g58
g51
NtRp588
(dp589
g54
(dp590
g62
I4
ssg63
Nsg56
(lp591
g49
(g65
g51
NtRp592
(dp593
g54
(dp594
sg63
g588
sg56
(lp595
g49
(g70
g51
NtRp596
(dp597
g54
(dp598
g74
g75
ssg63
g592
sg56
(lp599
S'app_folders'
p600
asbag49
(g70
g51
NtRp601
(dp602
g54
(dp603
g81
g82
ssg63
g592
sg56
(lp604
S':'
asbag49
(g70
g51
NtRp605
(dp606
g54
(dp607
sg63
g592
sg56
(lp608
g49
(g50
g51
NtRp609
(dp610
g54
(dp611
g62
I4
ssg63
g605
sg56
(lp612
S"set(['C:\\\\web2py\\\\applications\\\\admin\\\\', 'C:\\\\web2py\\\\applications\\\\welcome\\\\'])"
p613
asbasbasbag49
(g65
g51
NtRp614
(dp615
g54
(dp616
sg63
g588
sg56
(lp617
g49
(g70
g51
NtRp618
(dp619
g54
(dp620
g74
g75
ssg63
g614
sg56
(lp621
S'applications_parent'
p622
asbag49
(g70
g51
NtRp623
(dp624
g54
(dp625
g81
g82
ssg63
g614
sg56
(lp626
S':'
asbag49
(g70
g51
NtRp627
(dp628
g54
(dp629
sg63
g614
sg56
(lp630
g49
(g50
g51
NtRp631
(dp632
g54
(dp633
g62
I4
ssg63
g627
sg56
(lp634
S'C:\\web2py'
p635
asbasbasbag49
(g65
g51
NtRp636
(dp637
g54
(dp638
sg63
g588
sg56
(lp639
g49
(g70
g51
NtRp640
(dp641
g54
(dp642
g74
g75
ssg63
g636
sg56
(lp643
S'cmd_args'
p644
asbag49
(g70
g51
NtRp645
(dp646
g54
(dp647
g81
g82
ssg63
g636
sg56
(lp648
S':'
asbag49
(g70
g51
NtRp649
(dp650
g54
(dp651
sg63
g636
sg56
(lp652
g49
(g50
g51
NtRp653
(dp654
g54
(dp655
g62
I4
ssg63
g649
sg56
(lp656
g49
(g58
g51
NtRp657
(dp658
g54
(dp659
g62
I3
ssg63
Nsg56
(lp660
sbasbasbasbag49
(g65
g51
NtRp661
(dp662
g54
(dp663
sg63
g588
sg56
(lp664
g49
(g70
g51
NtRp665
(dp666
g54
(dp667
g74
g75
ssg63
g661
sg56
(lp668
S'cmd_options'
p669
asbag49
(g70
g51
NtRp670
(dp671
g54
(dp672
g81
g82
ssg63
g661
sg56
(lp673
S':'
asbag49
(g70
g51
NtRp674
(dp675
g54
(dp676
sg63
g661
sg56
(lp677
g49
(g50
g51
NtRp678
(dp679
g54
(dp680
g62
I4
ssg63
g674
sg56
(lp681
S"<Values at 0x3053fa8: {'verbose': False, 'ip': '127.0.0.1', 'shutdown_timeout': 5, 'taskbar': False, 'nocron': False, 'pid_filename': 'httpserver.pid', 'maxthreads': None, 'softcron': False, 'server_name': 'user-PC', 'bpython': False, 'nogui': False, 'port': 8000, 'extcron': False, 'debuglevel': 30, 'test': None, 'folder': 'C:\\\\web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'args': [''], 'socket_timeout': 5, 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'password': '<ask>', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'numthreads': None, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'plain': False, 'nobanner': False}>"
p682
asbasbasbag49
(g65
g51
NtRp683
(dp684
g54
(dp685
sg63
g588
sg56
(lp686
g49
(g70
g51
NtRp687
(dp688
g54
(dp689
g74
g75
ssg63
g683
sg56
(lp690
S'content_length'
p691
asbag49
(g70
g51
NtRp692
(dp693
g54
(dp694
g81
g82
ssg63
g683
sg56
(lp695
S':'
asbag49
(g70
g51
NtRp696
(dp697
g54
(dp698
sg63
g683
sg56
(lp699
g49
(g50
g51
NtRp700
(dp701
g54
(dp702
g62
I4
ssg63
g696
sg56
(lp703
S'0'
asbasbasbag49
(g65
g51
NtRp704
(dp705
g54
(dp706
sg63
g588
sg56
(lp707
g49
(g70
g51
NtRp708
(dp709
g54
(dp710
g74
g75
ssg63
g704
sg56
(lp711
S'db_sessions'
p712
asbag49
(g70
g51
NtRp713
(dp714
g54
(dp715
g81
g82
ssg63
g704
sg56
(lp716
S':'
asbag49
(g70
g51
NtRp717
(dp718
g54
(dp719
sg63
g704
sg56
(lp720
g49
(g50
g51
NtRp721
(dp722
g54
(dp723
g62
I4
ssg63
g717
sg56
(lp724
S'set([])'
p725
asbasbasbag49
(g65
g51
NtRp726
(dp727
g54
(dp728
sg63
g588
sg56
(lp729
g49
(g70
g51
NtRp730
(dp731
g54
(dp732
g74
g75
ssg63
g726
sg56
(lp733
S'debugging'
p734
asbag49
(g70
g51
NtRp735
(dp736
g54
(dp737
g81
g82
ssg63
g726
sg56
(lp738
S':'
asbag49
(g70
g51
NtRp739
(dp740
g54
(dp741
sg63
g726
sg56
(lp742
g49
(g50
g51
NtRp743
(dp744
g54
(dp745
g62
I4
ssg63
g739
sg56
(lp746
S'False'
p747
asbasbasbag49
(g65
g51
NtRp748
(dp749
g54
(dp750
sg63
g588
sg56
(lp751
g49
(g70
g51
NtRp752
(dp753
g54
(dp754
g74
g75
ssg63
g748
sg56
(lp755
S'gluon_parent'
p756
asbag49
(g70
g51
NtRp757
(dp758
g54
(dp759
g81
g82
ssg63
g748
sg56
(lp760
S':'
asbag49
(g70
g51
NtRp761
(dp762
g54
(dp763
sg63
g748
sg56
(lp764
g49
(g50
g51
NtRp765
(dp766
g54
(dp767
g62
I4
ssg63
g761
sg56
(lp768
S'C:\\web2py'
p769
asbasbasbag49
(g65
g51
NtRp770
(dp771
g54
(dp772
sg63
g588
sg56
(lp773
g49
(g70
g51
NtRp774
(dp775
g54
(dp776
g74
g75
ssg63
g770
sg56
(lp777
S'http_accept'
p778
asbag49
(g70
g51
NtRp779
(dp780
g54
(dp781
g81
g82
ssg63
g770
sg56
(lp782
S':'
asbag49
(g70
g51
NtRp783
(dp784
g54
(dp785
sg63
g770
sg56
(lp786
g49
(g50
g51
NtRp787
(dp788
g54
(dp789
g62
I4
ssg63
g783
sg56
(lp790
S'*/*'
p791
asbasbasbag49
(g65
g51
NtRp792
(dp793
g54
(dp794
sg63
g588
sg56
(lp795
g49
(g70
g51
NtRp796
(dp797
g54
(dp798
g74
g75
ssg63
g792
sg56
(lp799
S'http_accept_encoding'
p800
asbag49
(g70
g51
NtRp801
(dp802
g54
(dp803
g81
g82
ssg63
g792
sg56
(lp804
S':'
asbag49
(g70
g51
NtRp805
(dp806
g54
(dp807
sg63
g792
sg56
(lp808
g49
(g50
g51
NtRp809
(dp810
g54
(dp811
g62
I4
ssg63
g805
sg56
(lp812
S'gzip, deflate'
p813
asbasbasbag49
(g65
g51
NtRp814
(dp815
g54
(dp816
sg63
g588
sg56
(lp817
g49
(g70
g51
NtRp818
(dp819
g54
(dp820
g74
g75
ssg63
g814
sg56
(lp821
S'http_accept_language'
p822
asbag49
(g70
g51
NtRp823
(dp824
g54
(dp825
g81
g82
ssg63
g814
sg56
(lp826
S':'
asbag49
(g70
g51
NtRp827
(dp828
g54
(dp829
sg63
g814
sg56
(lp830
g49
(g50
g51
NtRp831
(dp832
g54
(dp833
g62
I4
ssg63
g827
sg56
(lp834
S'en-us,en;q=0.5'
p835
asbasbasbag49
(g65
g51
NtRp836
(dp837
g54
(dp838
sg63
g588
sg56
(lp839
g49
(g70
g51
NtRp840
(dp841
g54
(dp842
g74
g75
ssg63
g836
sg56
(lp843
S'http_cache_control'
p844
asbag49
(g70
g51
NtRp845
(dp846
g54
(dp847
g81
g82
ssg63
g836
sg56
(lp848
S':'
asbag49
(g70
g51
NtRp849
(dp850
g54
(dp851
sg63
g836
sg56
(lp852
g49
(g50
g51
NtRp853
(dp854
g54
(dp855
g62
I4
ssg63
g849
sg56
(lp856
S'no-cache'
p857
asbasbasbag49
(g65
g51
NtRp858
(dp859
g54
(dp860
sg63
g588
sg56
(lp861
g49
(g70
g51
NtRp862
(dp863
g54
(dp864
g74
g75
ssg63
g858
sg56
(lp865
S'http_connection'
p866
asbag49
(g70
g51
NtRp867
(dp868
g54
(dp869
g81
g82
ssg63
g858
sg56
(lp870
S':'
asbag49
(g70
g51
NtRp871
(dp872
g54
(dp873
sg63
g858
sg56
(lp874
g49
(g50
g51
NtRp875
(dp876
g54
(dp877
g62
I4
ssg63
g871
sg56
(lp878
S'keep-alive'
p879
asbasbasbag49
(g65
g51
NtRp880
(dp881
g54
(dp882
sg63
g588
sg56
(lp883
g49
(g70
g51
NtRp884
(dp885
g54
(dp886
g74
g75
ssg63
g880
sg56
(lp887
S'http_content_length'
p888
asbag49
(g70
g51
NtRp889
(dp890
g54
(dp891
g81
g82
ssg63
g880
sg56
(lp892
S':'
asbag49
(g70
g51
NtRp893
(dp894
g54
(dp895
sg63
g880
sg56
(lp896
g49
(g50
g51
NtRp897
(dp898
g54
(dp899
g62
I4
ssg63
g893
sg56
(lp900
S'0'
asbasbasbag49
(g65
g51
NtRp901
(dp902
g54
(dp903
sg63
g588
sg56
(lp904
g49
(g70
g51
NtRp905
(dp906
g54
(dp907
g74
g75
ssg63
g901
sg56
(lp908
S'http_cookie'
p909
asbag49
(g70
g51
NtRp910
(dp911
g54
(dp912
g81
g82
ssg63
g901
sg56
(lp913
S':'
asbag49
(g70
g51
NtRp914
(dp915
g54
(dp916
sg63
g901
sg56
(lp917
g49
(g50
g51
NtRp918
(dp919
g54
(dp920
g62
I4
ssg63
g914
sg56
(lp921
S'session_id_welcome=127.0.0.1-f092f555-5df0-46ec-9a87-5aac3eed92bc; session_id_admin=127.0.0.1-d6ef1267-b04c-4f80-b32f-ca10885fdfd5'
p922
asbasbasbag49
(g65
g51
NtRp923
(dp924
g54
(dp925
sg63
g588
sg56
(lp926
g49
(g70
g51
NtRp927
(dp928
g54
(dp929
g74
g75
ssg63
g923
sg56
(lp930
S'http_dnt'
p931
asbag49
(g70
g51
NtRp932
(dp933
g54
(dp934
g81
g82
ssg63
g923
sg56
(lp935
S':'
asbag49
(g70
g51
NtRp936
(dp937
g54
(dp938
sg63
g923
sg56
(lp939
g49
(g50
g51
NtRp940
(dp941
g54
(dp942
g62
I4
ssg63
g936
sg56
(lp943
S'1'
asbasbasbag49
(g65
g51
NtRp944
(dp945
g54
(dp946
sg63
g588
sg56
(lp947
g49
(g70
g51
NtRp948
(dp949
g54
(dp950
g74
g75
ssg63
g944
sg56
(lp951
S'http_host'
p952
asbag49
(g70
g51
NtRp953
(dp954
g54
(dp955
g81
g82
ssg63
g944
sg56
(lp956
S':'
asbag49
(g70
g51
NtRp957
(dp958
g54
(dp959
sg63
g944
sg56
(lp960
g49
(g50
g51
NtRp961
(dp962
g54
(dp963
g62
I4
ssg63
g957
sg56
(lp964
S'127.0.0.1:8000'
p965
asbasbasbag49
(g65
g51
NtRp966
(dp967
g54
(dp968
sg63
g588
sg56
(lp969
g49
(g70
g51
NtRp970
(dp971
g54
(dp972
g74
g75
ssg63
g966
sg56
(lp973
S'http_pragma'
p974
asbag49
(g70
g51
NtRp975
(dp976
g54
(dp977
g81
g82
ssg63
g966
sg56
(lp978
S':'
asbag49
(g70
g51
NtRp979
(dp980
g54
(dp981
sg63
g966
sg56
(lp982
g49
(g50
g51
NtRp983
(dp984
g54
(dp985
g62
I4
ssg63
g979
sg56
(lp986
S'no-cache'
p987
asbasbasbag49
(g65
g51
NtRp988
(dp989
g54
(dp990
sg63
g588
sg56
(lp991
g49
(g70
g51
NtRp992
(dp993
g54
(dp994
g74
g75
ssg63
g988
sg56
(lp995
S'http_referer'
p996
asbag49
(g70
g51
NtRp997
(dp998
g54
(dp999
g81
g82
ssg63
g988
sg56
(lp1000
S':'
asbag49
(g70
g51
NtRp1001
(dp1002
g54
(dp1003
sg63
g988
sg56
(lp1004
g49
(g50
g51
NtRp1005
(dp1006
g54
(dp1007
g62
I4
ssg63
g1001
sg56
(lp1008
S'http://127.0.0.1:8000/admin/default/site'
p1009
asbasbasbag49
(g65
g51
NtRp1010
(dp1011
g54
(dp1012
sg63
g588
sg56
(lp1013
g49
(g70
g51
NtRp1014
(dp1015
g54
(dp1016
g74
g75
ssg63
g1010
sg56
(lp1017
S'http_user_agent'
p1018
asbag49
(g70
g51
NtRp1019
(dp1020
g54
(dp1021
g81
g82
ssg63
g1010
sg56
(lp1022
S':'
asbag49
(g70
g51
NtRp1023
(dp1024
g54
(dp1025
sg63
g1010
sg56
(lp1026
g49
(g50
g51
NtRp1027
(dp1028
g54
(dp1029
g62
I4
ssg63
g1023
sg56
(lp1030
S'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:11.0) Gecko/20100101 Firefox/11.0'
p1031
asbasbasbag49
(g65
g51
NtRp1032
(dp1033
g54
(dp1034
sg63
g588
sg56
(lp1035
g49
(g70
g51
NtRp1036
(dp1037
g54
(dp1038
g74
g75
ssg63
g1032
sg56
(lp1039
S'http_x_requested_with'
p1040
asbag49
(g70
g51
NtRp1041
(dp1042
g54
(dp1043
g81
g82
ssg63
g1032
sg56
(lp1044
S':'
asbag49
(g70
g51
NtRp1045
(dp1046
g54
(dp1047
sg63
g1032
sg56
(lp1048
g49
(g50
g51
NtRp1049
(dp1050
g54
(dp1051
g62
I4
ssg63
g1045
sg56
(lp1052
S'XMLHttpRequest'
p1053
asbasbasbag49
(g65
g51
NtRp1054
(dp1055
g54
(dp1056
sg63
g588
sg56
(lp1057
g49
(g70
g51
NtRp1058
(dp1059
g54
(dp1060
g74
g75
ssg63
g1054
sg56
(lp1061
S'is_jython'
p1062
asbag49
(g70
g51
NtRp1063
(dp1064
g54
(dp1065
g81
g82
ssg63
g1054
sg56
(lp1066
S':'
asbag49
(g70
g51
NtRp1067
(dp1068
g54
(dp1069
sg63
g1054
sg56
(lp1070
g49
(g50
g51
NtRp1071
(dp1072
g54
(dp1073
g62
I4
ssg63
g1067
sg56
(lp1074
g747
asbasbasbag49
(g65
g51
NtRp1075
(dp1076
g54
(dp1077
sg63
g588
sg56
(lp1078
g49
(g70
g51
NtRp1079
(dp1080
g54
(dp1081
g74
g75
ssg63
g1075
sg56
(lp1082
S'is_pypy'
p1083
asbag49
(g70
g51
NtRp1084
(dp1085
g54
(dp1086
g81
g82
ssg63
g1075
sg56
(lp1087
S':'
asbag49
(g70
g51
NtRp1088
(dp1089
g54
(dp1090
sg63
g1075
sg56
(lp1091
g49
(g50
g51
NtRp1092
(dp1093
g54
(dp1094
g62
I4
ssg63
g1088
sg56
(lp1095
g747
asbasbasbag49
(g65
g51
NtRp1096
(dp1097
g54
(dp1098
sg63
g588
sg56
(lp1099
g49
(g70
g51
NtRp1100
(dp1101
g54
(dp1102
g74
g75
ssg63
g1096
sg56
(lp1103
S'path_info'
p1104
asbag49
(g70
g51
NtRp1105
(dp1106
g54
(dp1107
g81
g82
ssg63
g1096
sg56
(lp1108
S':'
asbag49
(g70
g51
NtRp1109
(dp1110
g54
(dp1111
sg63
g1096
sg56
(lp1112
g49
(g50
g51
NtRp1113
(dp1114
g54
(dp1115
g62
I4
ssg63
g1109
sg56
(lp1116
S'/admin/default/check_version'
p1117
asbasbasbag49
(g65
g51
NtRp1118
(dp1119
g54
(dp1120
sg63
g588
sg56
(lp1121
g49
(g70
g51
NtRp1122
(dp1123
g54
(dp1124
g74
g75
ssg63
g1118
sg56
(lp1125
S'query_string'
p1126
asbag49
(g70
g51
NtRp1127
(dp1128
g54
(dp1129
g81
g82
ssg63
g1118
sg56
(lp1130
S':'
asbag49
(g70
g51
NtRp1131
(dp1132
g54
(dp1133
sg63
g1118
sg56
(lp1134
g49
(g50
g51
NtRp1135
(dp1136
g54
(dp1137
g62
I4
ssg63
g1131
sg56
(lp1138
S''
asbasbasbag49
(g65
g51
NtRp1139
(dp1140
g54
(dp1141
sg63
g588
sg56
(lp1142
g49
(g70
g51
NtRp1143
(dp1144
g54
(dp1145
g74
g75
ssg63
g1139
sg56
(lp1146
S'remote_addr'
p1147
asbag49
(g70
g51
NtRp1148
(dp1149
g54
(dp1150
g81
g82
ssg63
g1139
sg56
(lp1151
S':'
asbag49
(g70
g51
NtRp1152
(dp1153
g54
(dp1154
sg63
g1139
sg56
(lp1155
g49
(g50
g51
NtRp1156
(dp1157
g54
(dp1158
g62
I4
ssg63
g1152
sg56
(lp1159
g182
asbasbasbag49
(g65
g51
NtRp1160
(dp1161
g54
(dp1162
sg63
g588
sg56
(lp1163
g49
(g70
g51
NtRp1164
(dp1165
g54
(dp1166
g74
g75
ssg63
g1160
sg56
(lp1167
S'remote_port'
p1168
asbag49
(g70
g51
NtRp1169
(dp1170
g54
(dp1171
g81
g82
ssg63
g1160
sg56
(lp1172
S':'
asbag49
(g70
g51
NtRp1173
(dp1174
g54
(dp1175
sg63
g1160
sg56
(lp1176
g49
(g50
g51
NtRp1177
(dp1178
g54
(dp1179
g62
I4
ssg63
g1173
sg56
(lp1180
S'60658'
p1181
asbasbasbag49
(g65
g51
NtRp1182
(dp1183
g54
(dp1184
sg63
g588
sg56
(lp1185
g49
(g70
g51
NtRp1186
(dp1187
g54
(dp1188
g74
g75
ssg63
g1182
sg56
(lp1189
S'request_method'
p1190
asbag49
(g70
g51
NtRp1191
(dp1192
g54
(dp1193
g81
g82
ssg63
g1182
sg56
(lp1194
S':'
asbag49
(g70
g51
NtRp1195
(dp1196
g54
(dp1197
sg63
g1182
sg56
(lp1198
g49
(g50
g51
NtRp1199
(dp1200
g54
(dp1201
g62
I4
ssg63
g1195
sg56
(lp1202
S'POST'
p1203
asbasbasbag49
(g65
g51
NtRp1204
(dp1205
g54
(dp1206
sg63
g588
sg56
(lp1207
g49
(g70
g51
NtRp1208
(dp1209
g54
(dp1210
g74
g75
ssg63
g1204
sg56
(lp1211
S'script_name'
p1212
asbag49
(g70
g51
NtRp1213
(dp1214
g54
(dp1215
g81
g82
ssg63
g1204
sg56
(lp1216
S':'
asbag49
(g70
g51
NtRp1217
(dp1218
g54
(dp1219
sg63
g1204
sg56
(lp1220
g49
(g50
g51
NtRp1221
(dp1222
g54
(dp1223
g62
I4
ssg63
g1217
sg56
(lp1224
S''
asbasbasbag49
(g65
g51
NtRp1225
(dp1226
g54
(dp1227
sg63
g588
sg56
(lp1228
g49
(g70
g51
NtRp1229
(dp1230
g54
(dp1231
g74
g75
ssg63
g1225
sg56
(lp1232
S'server_name'
p1233
asbag49
(g70
g51
NtRp1234
(dp1235
g54
(dp1236
g81
g82
ssg63
g1225
sg56
(lp1237
S':'
asbag49
(g70
g51
NtRp1238
(dp1239
g54
(dp1240
sg63
g1225
sg56
(lp1241
g49
(g50
g51
NtRp1242
(dp1243
g54
(dp1244
g62
I4
ssg63
g1238
sg56
(lp1245
S'user-PC'
p1246
asbasbasbag49
(g65
g51
NtRp1247
(dp1248
g54
(dp1249
sg63
g588
sg56
(lp1250
g49
(g70
g51
NtRp1251
(dp1252
g54
(dp1253
g74
g75
ssg63
g1247
sg56
(lp1254
S'server_port'
p1255
asbag49
(g70
g51
NtRp1256
(dp1257
g54
(dp1258
g81
g82
ssg63
g1247
sg56
(lp1259
S':'
asbag49
(g70
g51
NtRp1260
(dp1261
g54
(dp1262
sg63
g1247
sg56
(lp1263
g49
(g50
g51
NtRp1264
(dp1265
g54
(dp1266
g62
I4
ssg63
g1260
sg56
(lp1267
S'8000'
p1268
asbasbasbag49
(g65
g51
NtRp1269
(dp1270
g54
(dp1271
sg63
g588
sg56
(lp1272
g49
(g70
g51
NtRp1273
(dp1274
g54
(dp1275
g74
g75
ssg63
g1269
sg56
(lp1276
S'server_protocol'
p1277
asbag49
(g70
g51
NtRp1278
(dp1279
g54
(dp1280
g81
g82
ssg63
g1269
sg56
(lp1281
S':'
asbag49
(g70
g51
NtRp1282
(dp1283
g54
(dp1284
sg63
g1269
sg56
(lp1285
g49
(g50
g51
NtRp1286
(dp1287
g54
(dp1288
g62
I4
ssg63
g1282
sg56
(lp1289
S'HTTP/1.1'
p1290
asbasbasbag49
(g65
g51
NtRp1291
(dp1292
g54
(dp1293
sg63
g588
sg56
(lp1294
g49
(g70
g51
NtRp1295
(dp1296
g54
(dp1297
g74
g75
ssg63
g1291
sg56
(lp1298
S'server_software'
p1299
asbag49
(g70
g51
NtRp1300
(dp1301
g54
(dp1302
g81
g82
ssg63
g1291
sg56
(lp1303
S':'
asbag49
(g70
g51
NtRp1304
(dp1305
g54
(dp1306
sg63
g1291
sg56
(lp1307
g49
(g50
g51
NtRp1308
(dp1309
g54
(dp1310
g62
I4
ssg63
g1304
sg56
(lp1311
S'Rocket 1.2.4'
p1312
asbasbasbag49
(g65
g51
NtRp1313
(dp1314
g54
(dp1315
sg63
g588
sg56
(lp1316
g49
(g70
g51
NtRp1317
(dp1318
g54
(dp1319
g74
g75
ssg63
g1313
sg56
(lp1320
S'web2py_crontype'
p1321
asbag49
(g70
g51
NtRp1322
(dp1323
g54
(dp1324
g81
g82
ssg63
g1313
sg56
(lp1325
S':'
asbag49
(g70
g51
NtRp1326
(dp1327
g54
(dp1328
sg63
g1313
sg56
(lp1329
g49
(g50
g51
NtRp1330
(dp1331
g54
(dp1332
g62
I4
ssg63
g1326
sg56
(lp1333
S'hard'
p1334
asbasbasbag49
(g65
g51
NtRp1335
(dp1336
g54
(dp1337
sg63
g588
sg56
(lp1338
g49
(g70
g51
NtRp1339
(dp1340
g54
(dp1341
g74
g75
ssg63
g1335
sg56
(lp1342
S'web2py_path'
p1343
asbag49
(g70
g51
NtRp1344
(dp1345
g54
(dp1346
g81
g82
ssg63
g1335
sg56
(lp1347
S':'
asbag49
(g70
g51
NtRp1348
(dp1349
g54
(dp1350
sg63
g1335
sg56
(lp1351
g49
(g50
g51
NtRp1352
(dp1353
g54
(dp1354
g62
I4
ssg63
g1348
sg56
(lp1355
g635
asbasbasbag49
(g65
g51
NtRp1356
(dp1357
g54
(dp1358
sg63
g588
sg56
(lp1359
g49
(g70
g51
NtRp1360
(dp1361
g54
(dp1362
g74
g75
ssg63
g1356
sg56
(lp1363
S'web2py_version'
p1364
asbag49
(g70
g51
NtRp1365
(dp1366
g54
(dp1367
g81
g82
ssg63
g1356
sg56
(lp1368
S':'
asbag49
(g70
g51
NtRp1369
(dp1370
g54
(dp1371
sg63
g1356
sg56
(lp1372
g49
(g50
g51
NtRp1373
(dp1374
g54
(dp1375
g62
I4
ssg63
g1369
sg56
(lp1376
g49
(g58
g51
NtRp1377
(dp1378
g54
(dp1379
g62
I3
ssg63
Nsg56
(lp1380
g49
(g65
g51
NtRp1381
(dp1382
g54
(dp1383
sg63
g1377
sg56
(lp1384
g49
(g70
g51
NtRp1385
(dp1386
g54
(dp1387
sg63
g1381
sg56
(lp1388
g49
(g50
g51
NtRp1389
(dp1390
g54
(dp1391
g62
I3
ssg63
g1385
sg56
(lp1392
S'1'
asbasbasbag49
(g65
g51
NtRp1393
(dp1394
g54
(dp1395
sg63
g1377
sg56
(lp1396
g49
(g70
g51
NtRp1397
(dp1398
g54
(dp1399
sg63
g1393
sg56
(lp1400
g49
(g50
g51
NtRp1401
(dp1402
g54
(dp1403
g62
I3
ssg63
g1397
sg56
(lp1404
S'99'
p1405
asbasbasbag49
(g65
g51
NtRp1406
(dp1407
g54
(dp1408
sg63
g1377
sg56
(lp1409
g49
(g70
g51
NtRp1410
(dp1411
g54
(dp1412
sg63
g1406
sg56
(lp1413
g49
(g50
g51
NtRp1414
(dp1415
g54
(dp1416
g62
I3
ssg63
g1410
sg56
(lp1417
S'7'
asbasbasbag49
(g65
g51
NtRp1418
(dp1419
g54
(dp1420
sg63
g1377
sg56
(lp1421
g49
(g70
g51
NtRp1422
(dp1423
g54
(dp1424
sg63
g1418
sg56
(lp1425
g49
(g50
g51
NtRp1426
(dp1427
g54
(dp1428
g62
I3
ssg63
g1422
sg56
(lp1429
S'datetime.datetime(2012, 3, 4, 22, 12, 8)'
p1430
asbasbasbag49
(g65
g51
NtRp1431
(dp1432
g54
(dp1433
sg63
g1377
sg56
(lp1434
g49
(g70
g51
NtRp1435
(dp1436
g54
(dp1437
sg63
g1431
sg56
(lp1438
g49
(g50
g51
NtRp1439
(dp1440
g54
(dp1441
g62
I3
ssg63
g1435
sg56
(lp1442
S'stable'
p1443
asbasbasbasbasbasbasbag49
(g65
g51
NtRp1444
(dp1445
g54
(dp1446
sg63
g588
sg56
(lp1447
g49
(g70
g51
NtRp1448
(dp1449
g54
(dp1450
g74
g75
ssg63
g1444
sg56
(lp1451
S'wsgi_errors'
p1452
asbag49
(g70
g51
NtRp1453
(dp1454
g54
(dp1455
g81
g82
ssg63
g1444
sg56
(lp1456
S':'
asbag49
(g70
g51
NtRp1457
(dp1458
g54
(dp1459
sg63
g1444
sg56
(lp1460
g49
(g50
g51
NtRp1461
(dp1462
g54
(dp1463
g62
I4
ssg63
g1457
sg56
(lp1464
S"<open file '<stderr>', mode 'w' at 0x004200B0>"
p1465
asbasbasbag49
(g65
g51
NtRp1466
(dp1467
g54
(dp1468
sg63
g588
sg56
(lp1469
g49
(g70
g51
NtRp1470
(dp1471
g54
(dp1472
g74
g75
ssg63
g1466
sg56
(lp1473
S'wsgi_file_wrapper'
p1474
asbag49
(g70
g51
NtRp1475
(dp1476
g54
(dp1477
g81
g82
ssg63
g1466
sg56
(lp1478
S':'
asbag49
(g70
g51
NtRp1479
(dp1480
g54
(dp1481
sg63
g1466
sg56
(lp1482
g49
(g50
g51
NtRp1483
(dp1484
g54
(dp1485
g62
I4
ssg63
g1479
sg56
(lp1486
S'<class wsgiref.util.FileWrapper at 0x02DF2E40>'
p1487
asbasbasbag49
(g65
g51
NtRp1488
(dp1489
g54
(dp1490
sg63
g588
sg56
(lp1491
g49
(g70
g51
NtRp1492
(dp1493
g54
(dp1494
g74
g75
ssg63
g1488
sg56
(lp1495
S'wsgi_input'
p1496
asbag49
(g70
g51
NtRp1497
(dp1498
g54
(dp1499
g81
g82
ssg63
g1488
sg56
(lp1500
S':'
asbag49
(g70
g51
NtRp1501
(dp1502
g54
(dp1503
sg63
g1488
sg56
(lp1504
g49
(g50
g51
NtRp1505
(dp1506
g54
(dp1507
g62
I4
ssg63
g1501
sg56
(lp1508
S'<socket._fileobject object at 0x03206BB0>'
p1509
asbasbasbag49
(g65
g51
NtRp1510
(dp1511
g54
(dp1512
sg63
g588
sg56
(lp1513
g49
(g70
g51
NtRp1514
(dp1515
g54
(dp1516
g74
g75
ssg63
g1510
sg56
(lp1517
S'wsgi_multiprocess'
p1518
asbag49
(g70
g51
NtRp1519
(dp1520
g54
(dp1521
g81
g82
ssg63
g1510
sg56
(lp1522
S':'
asbag49
(g70
g51
NtRp1523
(dp1524
g54
(dp1525
sg63
g1510
sg56
(lp1526
g49
(g50
g51
NtRp1527
(dp1528
g54
(dp1529
g62
I4
ssg63
g1523
sg56
(lp1530
g747
asbasbasbag49
(g65
g51
NtRp1531
(dp1532
g54
(dp1533
sg63
g588
sg56
(lp1534
g49
(g70
g51
NtRp1535
(dp1536
g54
(dp1537
g74
g75
ssg63
g1531
sg56
(lp1538
S'wsgi_multithread'
p1539
asbag49
(g70
g51
NtRp1540
(dp1541
g54
(dp1542
g81
g82
ssg63
g1531
sg56
(lp1543
S':'
asbag49
(g70
g51
NtRp1544
(dp1545
g54
(dp1546
sg63
g1531
sg56
(lp1547
g49
(g50
g51
NtRp1548
(dp1549
g54
(dp1550
g62
I4
ssg63
g1544
sg56
(lp1551
g92
asbasbasbag49
(g65
g51
NtRp1552
(dp1553
g54
(dp1554
sg63
g588
sg56
(lp1555
g49
(g70
g51
NtRp1556
(dp1557
g54
(dp1558
g74
g75
ssg63
g1552
sg56
(lp1559
S'wsgi_run_once'
p1560
asbag49
(g70
g51
NtRp1561
(dp1562
g54
(dp1563
g81
g82
ssg63
g1552
sg56
(lp1564
S':'
asbag49
(g70
g51
NtRp1565
(dp1566
g54
(dp1567
sg63
g1552
sg56
(lp1568
g49
(g50
g51
NtRp1569
(dp1570
g54
(dp1571
g62
I4
ssg63
g1565
sg56
(lp1572
g747
asbasbasbag49
(g65
g51
NtRp1573
(dp1574
g54
(dp1575
sg63
g588
sg56
(lp1576
g49
(g70
g51
NtRp1577
(dp1578
g54
(dp1579
g74
g75
ssg63
g1573
sg56
(lp1580
S'wsgi_url_scheme'
p1581
asbag49
(g70
g51
NtRp1582
(dp1583
g54
(dp1584
g81
g82
ssg63
g1573
sg56
(lp1585
S':'
asbag49
(g70
g51
NtRp1586
(dp1587
g54
(dp1588
sg63
g1573
sg56
(lp1589
g49
(g50
g51
NtRp1590
(dp1591
g54
(dp1592
g62
I4
ssg63
g1586
sg56
(lp1593
S'http'
p1594
asbasbasbag49
(g65
g51
NtRp1595
(dp1596
g54
(dp1597
sg63
g588
sg56
(lp1598
g49
(g70
g51
NtRp1599
(dp1600
g54
(dp1601
g74
g75
ssg63
g1595
sg56
(lp1602
S'wsgi_version'
p1603
asbag49
(g70
g51
NtRp1604
(dp1605
g54
(dp1606
g81
g82
ssg63
g1595
sg56
(lp1607
S':'
asbag49
(g70
g51
NtRp1608
(dp1609
g54
(dp1610
sg63
g1595
sg56
(lp1611
g49
(g50
g51
NtRp1612
(dp1613
g54
(dp1614
g62
I4
ssg63
g1608
sg56
(lp1615
g49
(g58
g51
NtRp1616
(dp1617
g54
(dp1618
g62
I3
ssg63
Nsg56
(lp1619
g49
(g65
g51
NtRp1620
(dp1621
g54
(dp1622
sg63
g1616
sg56
(lp1623
g49
(g70
g51
NtRp1624
(dp1625
g54
(dp1626
sg63
g1620
sg56
(lp1627
g49
(g50
g51
NtRp1628
(dp1629
g54
(dp1630
g62
I3
ssg63
g1624
sg56
(lp1631
S'1'
asbasbasbag49
(g65
g51
NtRp1632
(dp1633
g54
(dp1634
sg63
g1616
sg56
(lp1635
g49
(g70
g51
NtRp1636
(dp1637
g54
(dp1638
sg63
g1632
sg56
(lp1639
g49
(g50
g51
NtRp1640
(dp1641
g54
(dp1642
g62
I3
ssg63
g1636
sg56
(lp1643
S'0'
asbasbasbasbasbasbasbasbasbasbasbag49
(g65
g51
NtRp1644
(dp1645
g54
(dp1646
sg63
g59
sg56
(lp1647
g49
(g70
g51
NtRp1648
(dp1649
g54
(dp1650
g74
g75
ssg63
g1644
sg56
(lp1651
S'extension'
p1652
asbag49
(g70
g51
NtRp1653
(dp1654
g54
(dp1655
g81
g82
ssg63
g1644
sg56
(lp1656
S':'
asbag49
(g70
g51
NtRp1657
(dp1658
g54
(dp1659
sg63
g1644
sg56
(lp1660
g49
(g50
g51
NtRp1661
(dp1662
g54
(dp1663
g62
I5
ssg63
g1657
sg56
(lp1664
S'html'
p1665
asbasbasbag49
(g65
g51
NtRp1666
(dp1667
g54
(dp1668
sg63
g59
sg56
(lp1669
g49
(g70
g51
NtRp1670
(dp1671
g54
(dp1672
g74
g75
ssg63
g1666
sg56
(lp1673
S'folder'
p1674
asbag49
(g70
g51
NtRp1675
(dp1676
g54
(dp1677
g81
g82
ssg63
g1666
sg56
(lp1678
S':'
asbag49
(g70
g51
NtRp1679
(dp1680
g54
(dp1681
sg63
g1666
sg56
(lp1682
g49
(g50
g51
NtRp1683
(dp1684
g54
(dp1685
g62
I5
ssg63
g1679
sg56
(lp1686
S'C:\\web2py\\applications\\admin\\'
p1687
asbasbasbag49
(g65
g51
NtRp1688
(dp1689
g54
(dp1690
sg63
g59
sg56
(lp1691
g49
(g70
g51
NtRp1692
(dp1693
g54
(dp1694
g74
g75
ssg63
g1688
sg56
(lp1695
S'function'
p1696
asbag49
(g70
g51
NtRp1697
(dp1698
g54
(dp1699
g81
g82
ssg63
g1688
sg56
(lp1700
S':'
asbag49
(g70
g51
NtRp1701
(dp1702
g54
(dp1703
sg63
g1688
sg56
(lp1704
g49
(g50
g51
NtRp1705
(dp1706
g54
(dp1707
g62
I5
ssg63
g1701
sg56
(lp1708
S'check_version'
p1709
asbasbasbag49
(g65
g51
NtRp1710
(dp1711
g54
(dp1712
sg63
g59
sg56
(lp1713
g49
(g70
g51
NtRp1714
(dp1715
g54
(dp1716
g74
g75
ssg63
g1710
sg56
(lp1717
S'get_vars'
p1718
asbag49
(g70
g51
NtRp1719
(dp1720
g54
(dp1721
g81
g82
ssg63
g1710
sg56
(lp1722
S':'
asbag49
(g70
g51
NtRp1723
(dp1724
g54
(dp1725
sg63
g1710
sg56
(lp1726
g49
(g50
g51
NtRp1727
(dp1728
g54
(dp1729
g62
I5
ssg63
g1723
sg56
(lp1730
g49
(g58
g51
NtRp1731
(dp1732
g54
(dp1733
g62
I4
ssg63
Nsg56
(lp1734
sbasbasbasbag49
(g65
g51
NtRp1735
(dp1736
g54
(dp1737
sg63
g59
sg56
(lp1738
g49
(g70
g51
NtRp1739
(dp1740
g54
(dp1741
g74
g75
ssg63
g1735
sg56
(lp1742
S'global_settings'
p1743
asbag49
(g70
g51
NtRp1744
(dp1745
g54
(dp1746
g81
g82
ssg63
g1735
sg56
(lp1747
S':'
asbag49
(g70
g51
NtRp1748
(dp1749
g54
(dp1750
sg63
g1735
sg56
(lp1751
g49
(g50
g51
NtRp1752
(dp1753
g54
(dp1754
g62
I5
ssg63
g1748
sg56
(lp1755
g49
(g58
g51
NtRp1756
(dp1757
g54
(dp1758
g62
I4
ssg63
Nsg56
(lp1759
g49
(g65
g51
NtRp1760
(dp1761
g54
(dp1762
sg63
g1756
sg56
(lp1763
g49
(g70
g51
NtRp1764
(dp1765
g54
(dp1766
g74
g75
ssg63
g1760
sg56
(lp1767
g600
asbag49
(g70
g51
NtRp1768
(dp1769
g54
(dp1770
g81
g82
ssg63
g1760
sg56
(lp1771
S':'
asbag49
(g70
g51
NtRp1772
(dp1773
g54
(dp1774
sg63
g1760
sg56
(lp1775
g49
(g50
g51
NtRp1776
(dp1777
g54
(dp1778
g62
I4
ssg63
g1772
sg56
(lp1779
S"set(['C:\\\\web2py\\\\applications\\\\admin\\\\', 'C:\\\\web2py\\\\applications\\\\welcome\\\\'])"
p1780
asbasbasbag49
(g65
g51
NtRp1781
(dp1782
g54
(dp1783
sg63
g1756
sg56
(lp1784
g49
(g70
g51
NtRp1785
(dp1786
g54
(dp1787
g74
g75
ssg63
g1781
sg56
(lp1788
g622
asbag49
(g70
g51
NtRp1789
(dp1790
g54
(dp1791
g81
g82
ssg63
g1781
sg56
(lp1792
S':'
asbag49
(g70
g51
NtRp1793
(dp1794
g54
(dp1795
sg63
g1781
sg56
(lp1796
g49
(g50
g51
NtRp1797
(dp1798
g54
(dp1799
g62
I4
ssg63
g1793
sg56
(lp1800
g635
asbasbasbag49
(g65
g51
NtRp1801
(dp1802
g54
(dp1803
sg63
g1756
sg56
(lp1804
g49
(g70
g51
NtRp1805
(dp1806
g54
(dp1807
g74
g75
ssg63
g1801
sg56
(lp1808
g644
asbag49
(g70
g51
NtRp1809
(dp1810
g54
(dp1811
g81
g82
ssg63
g1801
sg56
(lp1812
S':'
asbag49
(g70
g51
NtRp1813
(dp1814
g54
(dp1815
sg63
g1801
sg56
(lp1816
g49
(g50
g51
NtRp1817
(dp1818
g54
(dp1819
g62
I4
ssg63
g1813
sg56
(lp1820
g49
(g58
g51
NtRp1821
(dp1822
g54
(dp1823
g62
I3
ssg63
Nsg56
(lp1824
sbasbasbasbag49
(g65
g51
NtRp1825
(dp1826
g54
(dp1827
sg63
g1756
sg56
(lp1828
g49
(g70
g51
NtRp1829
(dp1830
g54
(dp1831
g74
g75
ssg63
g1825
sg56
(lp1832
g669
asbag49
(g70
g51
NtRp1833
(dp1834
g54
(dp1835
g81
g82
ssg63
g1825
sg56
(lp1836
S':'
asbag49
(g70
g51
NtRp1837
(dp1838
g54
(dp1839
sg63
g1825
sg56
(lp1840
g49
(g50
g51
NtRp1841
(dp1842
g54
(dp1843
g62
I4
ssg63
g1837
sg56
(lp1844
S"<Values at 0x3053fa8: {'verbose': False, 'ip': '127.0.0.1', 'shutdown_timeout': 5, 'taskbar': False, 'nocron': False, 'pid_filename': 'httpserver.pid', 'maxthreads': None, 'softcron': False, 'server_name': 'user-PC', 'bpython': False, 'nogui': False, 'port': 8000, 'extcron': False, 'debuglevel': 30, 'test': None, 'folder': 'C:\\\\web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'args': [''], 'socket_timeout': 5, 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'password': '<ask>', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'numthreads': None, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'plain': False, 'nobanner': False}>"
p1845
asbasbasbag49
(g65
g51
NtRp1846
(dp1847
g54
(dp1848
sg63
g1756
sg56
(lp1849
g49
(g70
g51
NtRp1850
(dp1851
g54
(dp1852
g74
g75
ssg63
g1846
sg56
(lp1853
g712
asbag49
(g70
g51
NtRp1854
(dp1855
g54
(dp1856
g81
g82
ssg63
g1846
sg56
(lp1857
S':'
asbag49
(g70
g51
NtRp1858
(dp1859
g54
(dp1860
sg63
g1846
sg56
(lp1861
g49
(g50
g51
NtRp1862
(dp1863
g54
(dp1864
g62
I4
ssg63
g1858
sg56
(lp1865
S'set([])'
p1866
asbasbasbag49
(g65
g51
NtRp1867
(dp1868
g54
(dp1869
sg63
g1756
sg56
(lp1870
g49
(g70
g51
NtRp1871
(dp1872
g54
(dp1873
g74
g75
ssg63
g1867
sg56
(lp1874
g734
asbag49
(g70
g51
NtRp1875
(dp1876
g54
(dp1877
g81
g82
ssg63
g1867
sg56
(lp1878
S':'
asbag49
(g70
g51
NtRp1879
(dp1880
g54
(dp1881
sg63
g1867
sg56
(lp1882
g49
(g50
g51
NtRp1883
(dp1884
g54
(dp1885
g62
I4
ssg63
g1879
sg56
(lp1886
g747
asbasbasbag49
(g65
g51
NtRp1887
(dp1888
g54
(dp1889
sg63
g1756
sg56
(lp1890
g49
(g70
g51
NtRp1891
(dp1892
g54
(dp1893
g74
g75
ssg63
g1887
sg56
(lp1894
g756
asbag49
(g70
g51
NtRp1895
(dp1896
g54
(dp1897
g81
g82
ssg63
g1887
sg56
(lp1898
S':'
asbag49
(g70
g51
NtRp1899
(dp1900
g54
(dp1901
sg63
g1887
sg56
(lp1902
g49
(g50
g51
NtRp1903
(dp1904
g54
(dp1905
g62
I4
ssg63
g1899
sg56
(lp1906
g769
asbasbasbag49
(g65
g51
NtRp1907
(dp1908
g54
(dp1909
sg63
g1756
sg56
(lp1910
g49
(g70
g51
NtRp1911
(dp1912
g54
(dp1913
g74
g75
ssg63
g1907
sg56
(lp1914
g1062
asbag49
(g70
g51
NtRp1915
(dp1916
g54
(dp1917
g81
g82
ssg63
g1907
sg56
(lp1918
S':'
asbag49
(g70
g51
NtRp1919
(dp1920
g54
(dp1921
sg63
g1907
sg56
(lp1922
g49
(g50
g51
NtRp1923
(dp1924
g54
(dp1925
g62
I4
ssg63
g1919
sg56
(lp1926
g747
asbasbasbag49
(g65
g51
NtRp1927
(dp1928
g54
(dp1929
sg63
g1756
sg56
(lp1930
g49
(g70
g51
NtRp1931
(dp1932
g54
(dp1933
g74
g75
ssg63
g1927
sg56
(lp1934
g1083
asbag49
(g70
g51
NtRp1935
(dp1936
g54
(dp1937
g81
g82
ssg63
g1927
sg56
(lp1938
S':'
asbag49
(g70
g51
NtRp1939
(dp1940
g54
(dp1941
sg63
g1927
sg56
(lp1942
g49
(g50
g51
NtRp1943
(dp1944
g54
(dp1945
g62
I4
ssg63
g1939
sg56
(lp1946
g747
asbasbasbag49
(g65
g51
NtRp1947
(dp1948
g54
(dp1949
sg63
g1756
sg56
(lp1950
g49
(g70
g51
NtRp1951
(dp1952
g54
(dp1953
g74
g75
ssg63
g1947
sg56
(lp1954
g1321
asbag49
(g70
g51
NtRp1955
(dp1956
g54
(dp1957
g81
g82
ssg63
g1947
sg56
(lp1958
S':'
asbag49
(g70
g51
NtRp1959
(dp1960
g54
(dp1961
sg63
g1947
sg56
(lp1962
g49
(g50
g51
NtRp1963
(dp1964
g54
(dp1965
g62
I4
ssg63
g1959
sg56
(lp1966
g1334
asbasbasbag49
(g65
g51
NtRp1967
(dp1968
g54
(dp1969
sg63
g1756
sg56
(lp1970
g49
(g70
g51
NtRp1971
(dp1972
g54
(dp1973
g74
g75
ssg63
g1967
sg56
(lp1974
g1364
asbag49
(g70
g51
NtRp1975
(dp1976
g54
(dp1977
g81
g82
ssg63
g1967
sg56
(lp1978
S':'
asbag49
(g70
g51
NtRp1979
(dp1980
g54
(dp1981
sg63
g1967
sg56
(lp1982
g49
(g50
g51
NtRp1983
(dp1984
g54
(dp1985
g62
I4
ssg63
g1979
sg56
(lp1986
g49
(g58
g51
NtRp1987
(dp1988
g54
(dp1989
g62
I3
ssg63
Nsg56
(lp1990
g49
(g65
g51
NtRp1991
(dp1992
g54
(dp1993
sg63
g1987
sg56
(lp1994
g49
(g70
g51
NtRp1995
(dp1996
g54
(dp1997
sg63
g1991
sg56
(lp1998
g49
(g50
g51
NtRp1999
(dp2000
g54
(dp2001
g62
I3
ssg63
g1995
sg56
(lp2002
S'1'
asbasbasbag49
(g65
g51
NtRp2003
(dp2004
g54
(dp2005
sg63
g1987
sg56
(lp2006
g49
(g70
g51
NtRp2007
(dp2008
g54
(dp2009
sg63
g2003
sg56
(lp2010
g49
(g50
g51
NtRp2011
(dp2012
g54
(dp2013
g62
I3
ssg63
g2007
sg56
(lp2014
S'99'
p2015
asbasbasbag49
(g65
g51
NtRp2016
(dp2017
g54
(dp2018
sg63
g1987
sg56
(lp2019
g49
(g70
g51
NtRp2020
(dp2021
g54
(dp2022
sg63
g2016
sg56
(lp2023
g49
(g50
g51
NtRp2024
(dp2025
g54
(dp2026
g62
I3
ssg63
g2020
sg56
(lp2027
S'7'
asbasbasbag49
(g65
g51
NtRp2028
(dp2029
g54
(dp2030
sg63
g1987
sg56
(lp2031
g49
(g70
g51
NtRp2032
(dp2033
g54
(dp2034
sg63
g2028
sg56
(lp2035
g49
(g50
g51
NtRp2036
(dp2037
g54
(dp2038
g62
I3
ssg63
g2032
sg56
(lp2039
S'datetime.datetime(2012, 3, 4, 22, 12, 8)'
p2040
asbasbasbag49
(g65
g51
NtRp2041
(dp2042
g54
(dp2043
sg63
g1987
sg56
(lp2044
g49
(g70
g51
NtRp2045
(dp2046
g54
(dp2047
sg63
g2041
sg56
(lp2048
g49
(g50
g51
NtRp2049
(dp2050
g54
(dp2051
g62
I3
ssg63
g2045
sg56
(lp2052
g1443
asbasbasbasbasbasbasbasbasbasbasbag49
(g65
g51
NtRp2053
(dp2054
g54
(dp2055
sg63
g59
sg56
(lp2056
g49
(g70
g51
NtRp2057
(dp2058
g54
(dp2059
g74
g75
ssg63
g2053
sg56
(lp2060
S'is_https'
p2061
asbag49
(g70
g51
NtRp2062
(dp2063
g54
(dp2064
g81
g82
ssg63
g2053
sg56
(lp2065
S':'
asbag49
(g70
g51
NtRp2066
(dp2067
g54
(dp2068
sg63
g2053
sg56
(lp2069
g49
(g50
g51
NtRp2070
(dp2071
g54
(dp2072
g62
I5
ssg63
g2066
sg56
(lp2073
g747
asbasbasbag49
(g65
g51
NtRp2074
(dp2075
g54
(dp2076
sg63
g59
sg56
(lp2077
g49
(g70
g51
NtRp2078
(dp2079
g54
(dp2080
g74
g75
ssg63
g2074
sg56
(lp2081
S'is_local'
p2082
asbag49
(g70
g51
NtRp2083
(dp2084
g54
(dp2085
g81
g82
ssg63
g2074
sg56
(lp2086
S':'
asbag49
(g70
g51
NtRp2087
(dp2088
g54
(dp2089
sg63
g2074
sg56
(lp2090
g49
(g50
g51
NtRp2091
(dp2092
g54
(dp2093
g62
I5
ssg63
g2087
sg56
(lp2094
g92
asbasbasbag49
(g65
g51
NtRp2095
(dp2096
g54
(dp2097
sg63
g59
sg56
(lp2098
g49
(g70
g51
NtRp2099
(dp2100
g54
(dp2101
g74
g75
ssg63
g2095
sg56
(lp2102
S'is_restful'
p2103
asbag49
(g70
g51
NtRp2104
(dp2105
g54
(dp2106
g81
g82
ssg63
g2095
sg56
(lp2107
S':'
asbag49
(g70
g51
NtRp2108
(dp2109
g54
(dp2110
sg63
g2095
sg56
(lp2111
g49
(g50
g51
NtRp2112
(dp2113
g54
(dp2114
g62
I5
ssg63
g2108
sg56
(lp2115
g747
asbasbasbag49
(g65
g51
NtRp2116
(dp2117
g54
(dp2118
sg63
g59
sg56
(lp2119
g49
(g70
g51
NtRp2120
(dp2121
g54
(dp2122
g74
g75
ssg63
g2116
sg56
(lp2123
S'now'
p2124
asbag49
(g70
g51
NtRp2125
(dp2126
g54
(dp2127
g81
g82
ssg63
g2116
sg56
(lp2128
S':'
asbag49
(g70
g51
NtRp2129
(dp2130
g54
(dp2131
sg63
g2116
sg56
(lp2132
g49
(g50
g51
NtRp2133
(dp2134
g54
(dp2135
g62
I5
ssg63
g2129
sg56
(lp2136
S'datetime.datetime(2012, 11, 6, 1, 56, 3, 526000)'
p2137
asbasbasbag49
(g65
g51
NtRp2138
(dp2139
g54
(dp2140
sg63
g59
sg56
(lp2141
g49
(g70
g51
NtRp2142
(dp2143
g54
(dp2144
g74
g75
ssg63
g2138
sg56
(lp2145
S'post_vars'
p2146
asbag49
(g70
g51
NtRp2147
(dp2148
g54
(dp2149
g81
g82
ssg63
g2138
sg56
(lp2150
S':'
asbag49
(g70
g51
NtRp2151
(dp2152
g54
(dp2153
sg63
g2138
sg56
(lp2154
g49
(g50
g51
NtRp2155
(dp2156
g54
(dp2157
g62
I5
ssg63
g2151
sg56
(lp2158
g49
(g58
g51
NtRp2159
(dp2160
g54
(dp2161
g62
I4
ssg63
Nsg56
(lp2162
sbasbasbasbag49
(g65
g51
NtRp2163
(dp2164
g54
(dp2165
sg63
g59
sg56
(lp2166
g49
(g70
g51
NtRp2167
(dp2168
g54
(dp2169
g74
g75
ssg63
g2163
sg56
(lp2170
S'url'
p2171
asbag49
(g70
g51
NtRp2172
(dp2173
g54
(dp2174
g81
g82
ssg63
g2163
sg56
(lp2175
S':'
asbag49
(g70
g51
NtRp2176
(dp2177
g54
(dp2178
sg63
g2163
sg56
(lp2179
g49
(g50
g51
NtRp2180
(dp2181
g54
(dp2182
g62
I5
ssg63
g2176
sg56
(lp2183
S'/admin/default/check_version'
p2184
asbasbasbag49
(g65
g51
NtRp2185
(dp2186
g54
(dp2187
sg63
g59
sg56
(lp2188
g49
(g70
g51
NtRp2189
(dp2190
g54
(dp2191
g74
g75
ssg63
g2185
sg56
(lp2192
S'utcnow'
p2193
asbag49
(g70
g51
NtRp2194
(dp2195
g54
(dp2196
g81
g82
ssg63
g2185
sg56
(lp2197
S':'
asbag49
(g70
g51
NtRp2198
(dp2199
g54
(dp2200
sg63
g2185
sg56
(lp2201
g49
(g50
g51
NtRp2202
(dp2203
g54
(dp2204
g62
I5
ssg63
g2198
sg56
(lp2205
S'datetime.datetime(2012, 11, 5, 20, 26, 3, 526000)'
p2206
asbasbasbag49
(g65
g51
NtRp2207
(dp2208
g54
(dp2209
sg63
g59
sg56
(lp2210
g49
(g70
g51
NtRp2211
(dp2212
g54
(dp2213
g74
g75
ssg63
g2207
sg56
(lp2214
S'uuid'
p2215
asbag49
(g70
g51
NtRp2216
(dp2217
g54
(dp2218
g81
g82
ssg63
g2207
sg56
(lp2219
S':'
asbag49
(g70
g51
NtRp2220
(dp2221
g54
(dp2222
sg63
g2207
sg56
(lp2223
g49
(g50
g51
NtRp2224
(dp2225
g54
(dp2226
g62
I5
ssg63
g2220
sg56
(lp2227
S'admin/127.0.0.1.2012-11-06.01-56-03.f5a2c293-b47b-4fe6-94d2-c703ada105b3'
p2228
asbasbasbag49
(g65
g51
NtRp2229
(dp2230
g54
(dp2231
sg63
g59
sg56
(lp2232
g49
(g70
g51
NtRp2233
(dp2234
g54
(dp2235
g74
g75
ssg63
g2229
sg56
(lp2236
S'vars'
p2237
asbag49
(g70
g51
NtRp2238
(dp2239
g54
(dp2240
g81
g82
ssg63
g2229
sg56
(lp2241
S':'
asbag49
(g70
g51
NtRp2242
(dp2243
g54
(dp2244
sg63
g2229
sg56
(lp2245
g49
(g50
g51
NtRp2246
(dp2247
g54
(dp2248
g62
I5
ssg63
g2242
sg56
(lp2249
g49
(g58
g51
NtRp2250
(dp2251
g54
(dp2252
g62
I4
ssg63
Nsg56
(lp2253
sbasbasbasbag49
(g65
g51
NtRp2254
(dp2255
g54
(dp2256
sg63
g59
sg56
(lp2257
g49
(g70
g51
NtRp2258
(dp2259
g54
(dp2260
g74
g75
ssg63
g2254
sg56
(lp2261
S'wsgi'
p2262
asbag49
(g70
g51
NtRp2263
(dp2264
g54
(dp2265
g81
g82
ssg63
g2254
sg56
(lp2266
S':'
asbag49
(g70
g51
NtRp2267
(dp2268
g54
(dp2269
sg63
g2254
sg56
(lp2270
g49
(g50
g51
NtRp2271
(dp2272
g54
(dp2273
g62
I5
ssg63
g2267
sg56
(lp2274
g49
(g58
g51
NtRp2275
(dp2276
g54
(dp2277
g62
I4
ssg63
Nsg56
(lp2278
g49
(g65
g51
NtRp2279
(dp2280
g54
(dp2281
sg63
g2275
sg56
(lp2282
g49
(g70
g51
NtRp2283
(dp2284
g54
(dp2285
g74
g75
ssg63
g2279
sg56
(lp2286
S'environ'
p2287
asbag49
(g70
g51
NtRp2288
(dp2289
g54
(dp2290
g81
g82
ssg63
g2279
sg56
(lp2291
S':'
asbag49
(g70
g51
NtRp2292
(dp2293
g54
(dp2294
sg63
g2279
sg56
(lp2295
g49
(g50
g51
NtRp2296
(dp2297
g54
(dp2298
g62
I4
ssg63
g2292
sg56
(lp2299
g49
(g58
g51
NtRp2300
(dp2301
g54
(dp2302
g62
I3
ssg63
Nsg56
(lp2303
g49
(g65
g51
NtRp2304
(dp2305
g54
(dp2306
sg63
g2300
sg56
(lp2307
g49
(g70
g51
NtRp2308
(dp2309
g54
(dp2310
g74
g75
ssg63
g2304
sg56
(lp2311
S'CONTENT_LENGTH'
p2312
asbag49
(g70
g51
NtRp2313
(dp2314
g54
(dp2315
g81
g82
ssg63
g2304
sg56
(lp2316
S':'
asbag49
(g70
g51
NtRp2317
(dp2318
g54
(dp2319
sg63
g2304
sg56
(lp2320
g49
(g50
g51
NtRp2321
(dp2322
g54
(dp2323
g62
I3
ssg63
g2317
sg56
(lp2324
S'0'
asbasbasbag49
(g65
g51
NtRp2325
(dp2326
g54
(dp2327
sg63
g2300
sg56
(lp2328
g49
(g70
g51
NtRp2329
(dp2330
g54
(dp2331
g74
g75
ssg63
g2325
sg56
(lp2332
S'HTTP_ACCEPT'
p2333
asbag49
(g70
g51
NtRp2334
(dp2335
g54
(dp2336
g81
g82
ssg63
g2325
sg56
(lp2337
S':'
asbag49
(g70
g51
NtRp2338
(dp2339
g54
(dp2340
sg63
g2325
sg56
(lp2341
g49
(g50
g51
NtRp2342
(dp2343
g54
(dp2344
g62
I3
ssg63
g2338
sg56
(lp2345
g791
asbasbasbag49
(g65
g51
NtRp2346
(dp2347
g54
(dp2348
sg63
g2300
sg56
(lp2349
g49
(g70
g51
NtRp2350
(dp2351
g54
(dp2352
g74
g75
ssg63
g2346
sg56
(lp2353
S'HTTP_ACCEPT_ENCODING'
p2354
asbag49
(g70
g51
NtRp2355
(dp2356
g54
(dp2357
g81
g82
ssg63
g2346
sg56
(lp2358
S':'
asbag49
(g70
g51
NtRp2359
(dp2360
g54
(dp2361
sg63
g2346
sg56
(lp2362
g49
(g50
g51
NtRp2363
(dp2364
g54
(dp2365
g62
I3
ssg63
g2359
sg56
(lp2366
g813
asbasbasbag49
(g65
g51
NtRp2367
(dp2368
g54
(dp2369
sg63
g2300
sg56
(lp2370
g49
(g70
g51
NtRp2371
(dp2372
g54
(dp2373
g74
g75
ssg63
g2367
sg56
(lp2374
S'HTTP_ACCEPT_LANGUAGE'
p2375
asbag49
(g70
g51
NtRp2376
(dp2377
g54
(dp2378
g81
g82
ssg63
g2367
sg56
(lp2379
S':'
asbag49
(g70
g51
NtRp2380
(dp2381
g54
(dp2382
sg63
g2367
sg56
(lp2383
g49
(g50
g51
NtRp2384
(dp2385
g54
(dp2386
g62
I3
ssg63
g2380
sg56
(lp2387
g835
asbasbasbag49
(g65
g51
NtRp2388
(dp2389
g54
(dp2390
sg63
g2300
sg56
(lp2391
g49
(g70
g51
NtRp2392
(dp2393
g54
(dp2394
g74
g75
ssg63
g2388
sg56
(lp2395
S'HTTP_CACHE_CONTROL'
p2396
asbag49
(g70
g51
NtRp2397
(dp2398
g54
(dp2399
g81
g82
ssg63
g2388
sg56
(lp2400
S':'
asbag49
(g70
g51
NtRp2401
(dp2402
g54
(dp2403
sg63
g2388
sg56
(lp2404
g49
(g50
g51
NtRp2405
(dp2406
g54
(dp2407
g62
I3
ssg63
g2401
sg56
(lp2408
g857
asbasbasbag49
(g65
g51
NtRp2409
(dp2410
g54
(dp2411
sg63
g2300
sg56
(lp2412
g49
(g70
g51
NtRp2413
(dp2414
g54
(dp2415
g74
g75
ssg63
g2409
sg56
(lp2416
S'HTTP_CONNECTION'
p2417
asbag49
(g70
g51
NtRp2418
(dp2419
g54
(dp2420
g81
g82
ssg63
g2409
sg56
(lp2421
S':'
asbag49
(g70
g51
NtRp2422
(dp2423
g54
(dp2424
sg63
g2409
sg56
(lp2425
g49
(g50
g51
NtRp2426
(dp2427
g54
(dp2428
g62
I3
ssg63
g2422
sg56
(lp2429
g879
asbasbasbag49
(g65
g51
NtRp2430
(dp2431
g54
(dp2432
sg63
g2300
sg56
(lp2433
g49
(g70
g51
NtRp2434
(dp2435
g54
(dp2436
g74
g75
ssg63
g2430
sg56
(lp2437
S'HTTP_CONTENT_LENGTH'
p2438
asbag49
(g70
g51
NtRp2439
(dp2440
g54
(dp2441
g81
g82
ssg63
g2430
sg56
(lp2442
S':'
asbag49
(g70
g51
NtRp2443
(dp2444
g54
(dp2445
sg63
g2430
sg56
(lp2446
g49
(g50
g51
NtRp2447
(dp2448
g54
(dp2449
g62
I3
ssg63
g2443
sg56
(lp2450
S'0'
asbasbasbag49
(g65
g51
NtRp2451
(dp2452
g54
(dp2453
sg63
g2300
sg56
(lp2454
g49
(g70
g51
NtRp2455
(dp2456
g54
(dp2457
g74
g75
ssg63
g2451
sg56
(lp2458
S'HTTP_COOKIE'
p2459
asbag49
(g70
g51
NtRp2460
(dp2461
g54
(dp2462
g81
g82
ssg63
g2451
sg56
(lp2463
S':'
asbag49
(g70
g51
NtRp2464
(dp2465
g54
(dp2466
sg63
g2451
sg56
(lp2467
g49
(g50
g51
NtRp2468
(dp2469
g54
(dp2470
g62
I3
ssg63
g2464
sg56
(lp2471
g922
asbasbasbag49
(g65
g51
NtRp2472
(dp2473
g54
(dp2474
sg63
g2300
sg56
(lp2475
g49
(g70
g51
NtRp2476
(dp2477
g54
(dp2478
g74
g75
ssg63
g2472
sg56
(lp2479
S'HTTP_DNT'
p2480
asbag49
(g70
g51
NtRp2481
(dp2482
g54
(dp2483
g81
g82
ssg63
g2472
sg56
(lp2484
S':'
asbag49
(g70
g51
NtRp2485
(dp2486
g54
(dp2487
sg63
g2472
sg56
(lp2488
g49
(g50
g51
NtRp2489
(dp2490
g54
(dp2491
g62
I3
ssg63
g2485
sg56
(lp2492
S'1'
asbasbasbag49
(g65
g51
NtRp2493
(dp2494
g54
(dp2495
sg63
g2300
sg56
(lp2496
g49
(g70
g51
NtRp2497
(dp2498
g54
(dp2499
g74
g75
ssg63
g2493
sg56
(lp2500
S'HTTP_HOST'
p2501
asbag49
(g70
g51
NtRp2502
(dp2503
g54
(dp2504
g81
g82
ssg63
g2493
sg56
(lp2505
S':'
asbag49
(g70
g51
NtRp2506
(dp2507
g54
(dp2508
sg63
g2493
sg56
(lp2509
g49
(g50
g51
NtRp2510
(dp2511
g54
(dp2512
g62
I3
ssg63
g2506
sg56
(lp2513
g965
asbasbasbag49
(g65
g51
NtRp2514
(dp2515
g54
(dp2516
sg63
g2300
sg56
(lp2517
g49
(g70
g51
NtRp2518
(dp2519
g54
(dp2520
g74
g75
ssg63
g2514
sg56
(lp2521
S'HTTP_PRAGMA'
p2522
asbag49
(g70
g51
NtRp2523
(dp2524
g54
(dp2525
g81
g82
ssg63
g2514
sg56
(lp2526
S':'
asbag49
(g70
g51
NtRp2527
(dp2528
g54
(dp2529
sg63
g2514
sg56
(lp2530
g49
(g50
g51
NtRp2531
(dp2532
g54
(dp2533
g62
I3
ssg63
g2527
sg56
(lp2534
g987
asbasbasbag49
(g65
g51
NtRp2535
(dp2536
g54
(dp2537
sg63
g2300
sg56
(lp2538
g49
(g70
g51
NtRp2539
(dp2540
g54
(dp2541
g74
g75
ssg63
g2535
sg56
(lp2542
S'HTTP_REFERER'
p2543
asbag49
(g70
g51
NtRp2544
(dp2545
g54
(dp2546
g81
g82
ssg63
g2535
sg56
(lp2547
S':'
asbag49
(g70
g51
NtRp2548
(dp2549
g54
(dp2550
sg63
g2535
sg56
(lp2551
g49
(g50
g51
NtRp2552
(dp2553
g54
(dp2554
g62
I3
ssg63
g2548
sg56
(lp2555
g1009
asbasbasbag49
(g65
g51
NtRp2556
(dp2557
g54
(dp2558
sg63
g2300
sg56
(lp2559
g49
(g70
g51
NtRp2560
(dp2561
g54
(dp2562
g74
g75
ssg63
g2556
sg56
(lp2563
S'HTTP_USER_AGENT'
p2564
asbag49
(g70
g51
NtRp2565
(dp2566
g54
(dp2567
g81
g82
ssg63
g2556
sg56
(lp2568
S':'
asbag49
(g70
g51
NtRp2569
(dp2570
g54
(dp2571
sg63
g2556
sg56
(lp2572
g49
(g50
g51
NtRp2573
(dp2574
g54
(dp2575
g62
I3
ssg63
g2569
sg56
(lp2576
g1031
asbasbasbag49
(g65
g51
NtRp2577
(dp2578
g54
(dp2579
sg63
g2300
sg56
(lp2580
g49
(g70
g51
NtRp2581
(dp2582
g54
(dp2583
g74
g75
ssg63
g2577
sg56
(lp2584
S'HTTP_X_REQUESTED_WITH'
p2585
asbag49
(g70
g51
NtRp2586
(dp2587
g54
(dp2588
g81
g82
ssg63
g2577
sg56
(lp2589
S':'
asbag49
(g70
g51
NtRp2590
(dp2591
g54
(dp2592
sg63
g2577
sg56
(lp2593
g49
(g50
g51
NtRp2594
(dp2595
g54
(dp2596
g62
I3
ssg63
g2590
sg56
(lp2597
g1053
asbasbasbag49
(g65
g51
NtRp2598
(dp2599
g54
(dp2600
sg63
g2300
sg56
(lp2601
g49
(g70
g51
NtRp2602
(dp2603
g54
(dp2604
g74
g75
ssg63
g2598
sg56
(lp2605
S'PATH_INFO'
p2606
asbag49
(g70
g51
NtRp2607
(dp2608
g54
(dp2609
g81
g82
ssg63
g2598
sg56
(lp2610
S':'
asbag49
(g70
g51
NtRp2611
(dp2612
g54
(dp2613
sg63
g2598
sg56
(lp2614
g49
(g50
g51
NtRp2615
(dp2616
g54
(dp2617
g62
I3
ssg63
g2611
sg56
(lp2618
g1117
asbasbasbag49
(g65
g51
NtRp2619
(dp2620
g54
(dp2621
sg63
g2300
sg56
(lp2622
g49
(g70
g51
NtRp2623
(dp2624
g54
(dp2625
g74
g75
ssg63
g2619
sg56
(lp2626
S'QUERY_STRING'
p2627
asbag49
(g70
g51
NtRp2628
(dp2629
g54
(dp2630
g81
g82
ssg63
g2619
sg56
(lp2631
S':'
asbag49
(g70
g51
NtRp2632
(dp2633
g54
(dp2634
sg63
g2619
sg56
(lp2635
g49
(g50
g51
NtRp2636
(dp2637
g54
(dp2638
g62
I3
ssg63
g2632
sg56
(lp2639
S''
asbasbasbag49
(g65
g51
NtRp2640
(dp2641
g54
(dp2642
sg63
g2300
sg56
(lp2643
g49
(g70
g51
NtRp2644
(dp2645
g54
(dp2646
g74
g75
ssg63
g2640
sg56
(lp2647
S'REMOTE_ADDR'
p2648
asbag49
(g70
g51
NtRp2649
(dp2650
g54
(dp2651
g81
g82
ssg63
g2640
sg56
(lp2652
S':'
asbag49
(g70
g51
NtRp2653
(dp2654
g54
(dp2655
sg63
g2640
sg56
(lp2656
g49
(g50
g51
NtRp2657
(dp2658
g54
(dp2659
g62
I3
ssg63
g2653
sg56
(lp2660
g182
asbasbasbag49
(g65
g51
NtRp2661
(dp2662
g54
(dp2663
sg63
g2300
sg56
(lp2664
g49
(g70
g51
NtRp2665
(dp2666
g54
(dp2667
g74
g75
ssg63
g2661
sg56
(lp2668
S'REMOTE_PORT'
p2669
asbag49
(g70
g51
NtRp2670
(dp2671
g54
(dp2672
g81
g82
ssg63
g2661
sg56
(lp2673
S':'
asbag49
(g70
g51
NtRp2674
(dp2675
g54
(dp2676
sg63
g2661
sg56
(lp2677
g49
(g50
g51
NtRp2678
(dp2679
g54
(dp2680
g62
I3
ssg63
g2674
sg56
(lp2681
g1181
asbasbasbag49
(g65
g51
NtRp2682
(dp2683
g54
(dp2684
sg63
g2300
sg56
(lp2685
g49
(g70
g51
NtRp2686
(dp2687
g54
(dp2688
g74
g75
ssg63
g2682
sg56
(lp2689
S'REQUEST_METHOD'
p2690
asbag49
(g70
g51
NtRp2691
(dp2692
g54
(dp2693
g81
g82
ssg63
g2682
sg56
(lp2694
S':'
asbag49
(g70
g51
NtRp2695
(dp2696
g54
(dp2697
sg63
g2682
sg56
(lp2698
g49
(g50
g51
NtRp2699
(dp2700
g54
(dp2701
g62
I3
ssg63
g2695
sg56
(lp2702
g1203
asbasbasbag49
(g65
g51
NtRp2703
(dp2704
g54
(dp2705
sg63
g2300
sg56
(lp2706
g49
(g70
g51
NtRp2707
(dp2708
g54
(dp2709
g74
g75
ssg63
g2703
sg56
(lp2710
S'SCRIPT_NAME'
p2711
asbag49
(g70
g51
NtRp2712
(dp2713
g54
(dp2714
g81
g82
ssg63
g2703
sg56
(lp2715
S':'
asbag49
(g70
g51
NtRp2716
(dp2717
g54
(dp2718
sg63
g2703
sg56
(lp2719
g49
(g50
g51
NtRp2720
(dp2721
g54
(dp2722
g62
I3
ssg63
g2716
sg56
(lp2723
S''
asbasbasbag49
(g65
g51
NtRp2724
(dp2725
g54
(dp2726
sg63
g2300
sg56
(lp2727
g49
(g70
g51
NtRp2728
(dp2729
g54
(dp2730
g74
g75
ssg63
g2724
sg56
(lp2731
S'SERVER_NAME'
p2732
asbag49
(g70
g51
NtRp2733
(dp2734
g54
(dp2735
g81
g82
ssg63
g2724
sg56
(lp2736
S':'
asbag49
(g70
g51
NtRp2737
(dp2738
g54
(dp2739
sg63
g2724
sg56
(lp2740
g49
(g50
g51
NtRp2741
(dp2742
g54
(dp2743
g62
I3
ssg63
g2737
sg56
(lp2744
g1246
asbasbasbag49
(g65
g51
NtRp2745
(dp2746
g54
(dp2747
sg63
g2300
sg56
(lp2748
g49
(g70
g51
NtRp2749
(dp2750
g54
(dp2751
g74
g75
ssg63
g2745
sg56
(lp2752
S'SERVER_PORT'
p2753
asbag49
(g70
g51
NtRp2754
(dp2755
g54
(dp2756
g81
g82
ssg63
g2745
sg56
(lp2757
S':'
asbag49
(g70
g51
NtRp2758
(dp2759
g54
(dp2760
sg63
g2745
sg56
(lp2761
g49
(g50
g51
NtRp2762
(dp2763
g54
(dp2764
g62
I3
ssg63
g2758
sg56
(lp2765
g1268
asbasbasbag49
(g65
g51
NtRp2766
(dp2767
g54
(dp2768
sg63
g2300
sg56
(lp2769
g49
(g70
g51
NtRp2770
(dp2771
g54
(dp2772
g74
g75
ssg63
g2766
sg56
(lp2773
S'SERVER_PROTOCOL'
p2774
asbag49
(g70
g51
NtRp2775
(dp2776
g54
(dp2777
g81
g82
ssg63
g2766
sg56
(lp2778
S':'
asbag49
(g70
g51
NtRp2779
(dp2780
g54
(dp2781
sg63
g2766
sg56
(lp2782
g49
(g50
g51
NtRp2783
(dp2784
g54
(dp2785
g62
I3
ssg63
g2779
sg56
(lp2786
g1290
asbasbasbag49
(g65
g51
NtRp2787
(dp2788
g54
(dp2789
sg63
g2300
sg56
(lp2790
g49
(g70
g51
NtRp2791
(dp2792
g54
(dp2793
g74
g75
ssg63
g2787
sg56
(lp2794
S'SERVER_SOFTWARE'
p2795
asbag49
(g70
g51
NtRp2796
(dp2797
g54
(dp2798
g81
g82
ssg63
g2787
sg56
(lp2799
S':'
asbag49
(g70
g51
NtRp2800
(dp2801
g54
(dp2802
sg63
g2787
sg56
(lp2803
g49
(g50
g51
NtRp2804
(dp2805
g54
(dp2806
g62
I3
ssg63
g2800
sg56
(lp2807
g1312
asbasbasbag49
(g65
g51
NtRp2808
(dp2809
g54
(dp2810
sg63
g2300
sg56
(lp2811
g49
(g70
g51
NtRp2812
(dp2813
g54
(dp2814
g74
g75
ssg63
g2808
sg56
(lp2815
S'wsgi.errors'
p2816
asbag49
(g70
g51
NtRp2817
(dp2818
g54
(dp2819
g81
g82
ssg63
g2808
sg56
(lp2820
S':'
asbag49
(g70
g51
NtRp2821
(dp2822
g54
(dp2823
sg63
g2808
sg56
(lp2824
g49
(g50
g51
NtRp2825
(dp2826
g54
(dp2827
g62
I3
ssg63
g2821
sg56
(lp2828
S"<open file '<stderr>', mode 'w' at 0x004200B0>"
p2829
asbasbasbag49
(g65
g51
NtRp2830
(dp2831
g54
(dp2832
sg63
g2300
sg56
(lp2833
g49
(g70
g51
NtRp2834
(dp2835
g54
(dp2836
g74
g75
ssg63
g2830
sg56
(lp2837
S'wsgi.file_wrapper'
p2838
asbag49
(g70
g51
NtRp2839
(dp2840
g54
(dp2841
g81
g82
ssg63
g2830
sg56
(lp2842
S':'
asbag49
(g70
g51
NtRp2843
(dp2844
g54
(dp2845
sg63
g2830
sg56
(lp2846
g49
(g50
g51
NtRp2847
(dp2848
g54
(dp2849
g62
I3
ssg63
g2843
sg56
(lp2850
S'<class wsgiref.util.FileWrapper at 0x02DF2E40>'
p2851
asbasbasbag49
(g65
g51
NtRp2852
(dp2853
g54
(dp2854
sg63
g2300
sg56
(lp2855
g49
(g70
g51
NtRp2856
(dp2857
g54
(dp2858
g74
g75
ssg63
g2852
sg56
(lp2859
S'wsgi.input'
p2860
asbag49
(g70
g51
NtRp2861
(dp2862
g54
(dp2863
g81
g82
ssg63
g2852
sg56
(lp2864
S':'
asbag49
(g70
g51
NtRp2865
(dp2866
g54
(dp2867
sg63
g2852
sg56
(lp2868
g49
(g50
g51
NtRp2869
(dp2870
g54
(dp2871
g62
I3
ssg63
g2865
sg56
(lp2872
S"<open file '<fdopen>', mode 'w+b' at 0x03213140>"
p2873
asbasbasbag49
(g65
g51
NtRp2874
(dp2875
g54
(dp2876
sg63
g2300
sg56
(lp2877
g49
(g70
g51
NtRp2878
(dp2879
g54
(dp2880
g74
g75
ssg63
g2874
sg56
(lp2881
S'wsgi.multiprocess'
p2882
asbag49
(g70
g51
NtRp2883
(dp2884
g54
(dp2885
g81
g82
ssg63
g2874
sg56
(lp2886
S':'
asbag49
(g70
g51
NtRp2887
(dp2888
g54
(dp2889
sg63
g2874
sg56
(lp2890
g49
(g50
g51
NtRp2891
(dp2892
g54
(dp2893
g62
I3
ssg63
g2887
sg56
(lp2894
g747
asbasbasbag49
(g65
g51
NtRp2895
(dp2896
g54
(dp2897
sg63
g2300
sg56
(lp2898
g49
(g70
g51
NtRp2899
(dp2900
g54
(dp2901
g74
g75
ssg63
g2895
sg56
(lp2902
S'wsgi.multithread'
p2903
asbag49
(g70
g51
NtRp2904
(dp2905
g54
(dp2906
g81
g82
ssg63
g2895
sg56
(lp2907
S':'
asbag49
(g70
g51
NtRp2908
(dp2909
g54
(dp2910
sg63
g2895
sg56
(lp2911
g49
(g50
g51
NtRp2912
(dp2913
g54
(dp2914
g62
I3
ssg63
g2908
sg56
(lp2915
g92
asbasbasbag49
(g65
g51
NtRp2916
(dp2917
g54
(dp2918
sg63
g2300
sg56
(lp2919
g49
(g70
g51
NtRp2920
(dp2921
g54
(dp2922
g74
g75
ssg63
g2916
sg56
(lp2923
S'wsgi.run_once'
p2924
asbag49
(g70
g51
NtRp2925
(dp2926
g54
(dp2927
g81
g82
ssg63
g2916
sg56
(lp2928
S':'
asbag49
(g70
g51
NtRp2929
(dp2930
g54
(dp2931
sg63
g2916
sg56
(lp2932
g49
(g50
g51
NtRp2933
(dp2934
g54
(dp2935
g62
I3
ssg63
g2929
sg56
(lp2936
g747
asbasbasbag49
(g65
g51
NtRp2937
(dp2938
g54
(dp2939
sg63
g2300
sg56
(lp2940
g49
(g70
g51
NtRp2941
(dp2942
g54
(dp2943
g74
g75
ssg63
g2937
sg56
(lp2944
S'wsgi.url_scheme'
p2945
asbag49
(g70
g51
NtRp2946
(dp2947
g54
(dp2948
g81
g82
ssg63
g2937
sg56
(lp2949
S':'
asbag49
(g70
g51
NtRp2950
(dp2951
g54
(dp2952
sg63
g2937
sg56
(lp2953
g49
(g50
g51
NtRp2954
(dp2955
g54
(dp2956
g62
I3
ssg63
g2950
sg56
(lp2957
g1594
asbasbasbag49
(g65
g51
NtRp2958
(dp2959
g54
(dp2960
sg63
g2300
sg56
(lp2961
g49
(g70
g51
NtRp2962
(dp2963
g54
(dp2964
g74
g75
ssg63
g2958
sg56
(lp2965
S'wsgi.version'
p2966
asbag49
(g70
g51
NtRp2967
(dp2968
g54
(dp2969
g81
g82
ssg63
g2958
sg56
(lp2970
S':'
asbag49
(g70
g51
NtRp2971
(dp2972
g54
(dp2973
sg63
g2958
sg56
(lp2974
g49
(g50
g51
NtRp2975
(dp2976
g54
(dp2977
g62
I3
ssg63
g2971
sg56
(lp2978
S'1'
asbasbasbasbasbasbasbasbasbasbasbasbasbsS'frames'
p2979
(lp2980
(dp2981
S'file'
p2982
S'C:\\web2py\\gluon\\restricted.py'
p2983
sS'dump'
p2984
(dp2985
sS'lnum'
p2986
I205
sS'lines'
p2987
(dp2988
sS'call'
p2989
S"(code='# coding: utf8\\n\\nEXPERIMENTAL_STUFF = True\\n\\nif EX...\\n\\nresponse._vars=response._caller(check_version)\\n', environment={'A': <class 'gluon.html.A'>, 'ALLOW_TOGGLE': 'true', 'A_button': <function A_button at 0x03220DF0>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, ...}, layer=r'C:\\web2py\\applications\\admin\\controllers/default.py')"
p2990
sS'func'
p2991
S'restricted'
p2992
sa(dp2993
g2982
S'C:\\web2py\\applications\\admin\\controllers\\default.py'
p2994
sg2984
(dp2995
sg2986
I1352
sg2987
(dp2996
I1344
S'def reload_routes():'
p2997
sI1345
S'    """ Reload routes.py """'
p2998
sI1346
S'    import gluon.rewrite'
p2999
sI1347
S'    gluon.rewrite.load()'
p3000
sI1348
S"    redirect(URL('site'))"
p3001
sI1349
S''
sI1350
S''
sI1341
S'    else:'
p3002
sI1342
S'        return dict(form=T("Disabled"))'
p3003
sI1343
S''
ssg2989
S'()'
p3004
sg2991
S'<module>'
p3005
sa(dp3006
g2982
S'C:\\web2py\\gluon\\globals.py'
p3007
sg2984
(dp3008
sg2986
I173
sg2987
(dp3009
sg2989
S'(f=<function check_version at 0x03220430>)'
p3010
sg2991
S'<lambda>'
p3011
sa(dp3012
g2982
S'C:\\web2py\\applications\\admin\\controllers\\default.py'
p3013
sg2984
(dp3014
sg2986
I110
sg2987
(dp3015
I105
S'    if new_version == -1:'
p3016
sI106
S"        return A(T('Unable to check for upgrades'), _href=WEB2PY_URL)"
p3017
sI107
S'    elif new_version != True:'
p3018
sI108
S"        return A(T('web2py is up to date'), _href=WEB2PY_URL)"
p3019
sI109
S'    elif platform.system().lower() in (\'windows\',\'win32\',\'win64\') and os.path.exists("web2py.exe"):'
p3020
sI110
S"        return SPAN('You should upgrade to version %s' % version_number)"
p3021
sI111
S'    else:'
p3022
sI112
S"        return sp_button(URL('upgrade_web2py'), T('upgrade now')) \\"
p3023
sI113
S'          + XML(\' <strong class="upgrade_version">%s</strong>\' % version_number)'
p3024
sI114
S''
ssg2989
S'()'
p3025
sg2991
S'check_version'
p3026
sasS'pyver'
p3027
S'Python 2.5.4: C:\\web2py\\web2py.exe'
p3028
sS'session'
p3029
g49
(g50
g51
NtRp3030
(dp3031
g54
(dp3032
sg56
(lp3033
g49
(g58
g51
NtRp3034
(dp3035
g54
(dp3036
g62
I5
ssg63
Nsg56
(lp3037
g49
(g65
g51
NtRp3038
(dp3039
g54
(dp3040
sg63
g3034
sg56
(lp3041
g49
(g70
g51
NtRp3042
(dp3043
g54
(dp3044
g74
g75
ssg63
g3038
sg56
(lp3045
S'authorized'
p3046
asbag49
(g70
g51
NtRp3047
(dp3048
g54
(dp3049
g81
g82
ssg63
g3038
sg56
(lp3050
S':'
asbag49
(g70
g51
NtRp3051
(dp3052
g54
(dp3053
sg63
g3038
sg56
(lp3054
g49
(g50
g51
NtRp3055
(dp3056
g54
(dp3057
g62
I5
ssg63
g3051
sg56
(lp3058
g92
asbasbasbag49
(g65
g51
NtRp3059
(dp3060
g54
(dp3061
sg63
g3034
sg56
(lp3062
g49
(g70
g51
NtRp3063
(dp3064
g54
(dp3065
g74
g75
ssg63
g3059
sg56
(lp3066
S'check_version'
p3067
asbag49
(g70
g51
NtRp3068
(dp3069
g54
(dp3070
g81
g82
ssg63
g3059
sg56
(lp3071
S':'
asbag49
(g70
g51
NtRp3072
(dp3073
g54
(dp3074
sg63
g3059
sg56
(lp3075
g49
(g50
g51
NtRp3076
(dp3077
g54
(dp3078
g62
I5
ssg63
g3072
sg56
(lp3079
g747
asbasbasbag49
(g65
g51
NtRp3080
(dp3081
g54
(dp3082
sg63
g3034
sg56
(lp3083
g49
(g70
g51
NtRp3084
(dp3085
g54
(dp3086
g74
g75
ssg63
g3080
sg56
(lp3087
S'last_time'
p3088
asbag49
(g70
g51
NtRp3089
(dp3090
g54
(dp3091
g81
g82
ssg63
g3080
sg56
(lp3092
S':'
asbag49
(g70
g51
NtRp3093
(dp3094
g54
(dp3095
sg63
g3080
sg56
(lp3096
g49
(g50
g51
NtRp3097
(dp3098
g54
(dp3099
g62
I5
ssg63
g3093
sg56
(lp3100
S'1352147163.5469999'
p3101
asbasbasbasbasbsS'etype'
p3102
S"<type 'exceptions.TypeError'>"
p3103
sS'date'
p3104
S'Tue Nov 06 01:56:04 2012'
p3105
sS'response'
p3106
g49
(g50
g51
NtRp3107
(dp3108
g54
(dp3109
sg56
(lp3110
g49
(g58
g51
NtRp3111
(dp3112
g54
(dp3113
g62
I5
ssg63
Nsg56
(lp3114
g49
(g65
g51
NtRp3115
(dp3116
g54
(dp3117
sg63
g3111
sg56
(lp3118
g49
(g70
g51
NtRp3119
(dp3120
g54
(dp3121
g74
g75
ssg63
g3115
sg56
(lp3122
g147
asbag49
(g70
g51
NtRp3123
(dp3124
g54
(dp3125
g81
g82
ssg63
g3115
sg56
(lp3126
S':'
asbag49
(g70
g51
NtRp3127
(dp3128
g54
(dp3129
sg63
g3115
sg56
(lp3130
g49
(g50
g51
NtRp3131
(dp3132
g54
(dp3133
g62
I5
ssg63
g3127
sg56
(lp3134
S'<cStringIO.StringO object at 0x06779E00>'
p3135
asbasbasbag49
(g65
g51
NtRp3136
(dp3137
g54
(dp3138
sg63
g3111
sg56
(lp3139
g49
(g70
g51
NtRp3140
(dp3141
g54
(dp3142
g74
g75
ssg63
g3136
sg56
(lp3143
g213
asbag49
(g70
g51
NtRp3144
(dp3145
g54
(dp3146
g81
g82
ssg63
g3136
sg56
(lp3147
S':'
asbag49
(g70
g51
NtRp3148
(dp3149
g54
(dp3150
sg63
g3136
sg56
(lp3151
g49
(g50
g51
NtRp3152
(dp3153
g54
(dp3154
g62
I5
ssg63
g3148
sg56
(lp3155
g49
(g58
g51
NtRp3156
(dp3157
g54
(dp3158
g62
I4
ssg63
Nsg56
(lp3159
g49
(g65
g51
NtRp3160
(dp3161
g54
(dp3162
sg63
g3156
sg56
(lp3163
g49
(g70
g51
NtRp3164
(dp3165
g54
(dp3166
g74
g75
ssg63
g3160
sg56
(lp3167
S'session_id_admin'
p3168
asbag49
(g70
g51
NtRp3169
(dp3170
g54
(dp3171
g81
g82
ssg63
g3160
sg56
(lp3172
S':'
asbag49
(g70
g51
NtRp3173
(dp3174
g54
(dp3175
sg63
g3160
sg56
(lp3176
g49
(g50
g51
NtRp3177
(dp3178
g54
(dp3179
g62
I4
ssg63
g3173
sg56
(lp3180
g49
(g58
g51
NtRp3181
(dp3182
g54
(dp3183
g62
I3
ssg63
Nsg56
(lp3184
g49
(g65
g51
NtRp3185
(dp3186
g54
(dp3187
sg63
g3181
sg56
(lp3188
g49
(g70
g51
NtRp3189
(dp3190
g54
(dp3191
g74
g75
ssg63
g3185
sg56
(lp3192
g263
asbag49
(g70
g51
NtRp3193
(dp3194
g54
(dp3195
g81
g82
ssg63
g3185
sg56
(lp3196
S':'
asbag49
(g70
g51
NtRp3197
(dp3198
g54
(dp3199
sg63
g3185
sg56
(lp3200
g49
(g50
g51
NtRp3201
(dp3202
g54
(dp3203
g62
I3
ssg63
g3197
sg56
(lp3204
S''
asbasbasbag49
(g65
g51
NtRp3205
(dp3206
g54
(dp3207
sg63
g3181
sg56
(lp3208
g49
(g70
g51
NtRp3209
(dp3210
g54
(dp3211
g74
g75
ssg63
g3205
sg56
(lp3212
g284
asbag49
(g70
g51
NtRp3213
(dp3214
g54
(dp3215
g81
g82
ssg63
g3205
sg56
(lp3216
S':'
asbag49
(g70
g51
NtRp3217
(dp3218
g54
(dp3219
sg63
g3205
sg56
(lp3220
g49
(g50
g51
NtRp3221
(dp3222
g54
(dp3223
g62
I3
ssg63
g3217
sg56
(lp3224
S''
asbasbasbag49
(g65
g51
NtRp3225
(dp3226
g54
(dp3227
sg63
g3181
sg56
(lp3228
g49
(g70
g51
NtRp3229
(dp3230
g54
(dp3231
g74
g75
ssg63
g3225
sg56
(lp3232
g305
asbag49
(g70
g51
NtRp3233
(dp3234
g54
(dp3235
g81
g82
ssg63
g3225
sg56
(lp3236
S':'
asbag49
(g70
g51
NtRp3237
(dp3238
g54
(dp3239
sg63
g3225
sg56
(lp3240
g49
(g50
g51
NtRp3241
(dp3242
g54
(dp3243
g62
I3
ssg63
g3237
sg56
(lp3244
S''
asbasbasbag49
(g65
g51
NtRp3245
(dp3246
g54
(dp3247
sg63
g3181
sg56
(lp3248
g49
(g70
g51
NtRp3249
(dp3250
g54
(dp3251
g74
g75
ssg63
g3245
sg56
(lp3252
g326
asbag49
(g70
g51
NtRp3253
(dp3254
g54
(dp3255
g81
g82
ssg63
g3245
sg56
(lp3256
S':'
asbag49
(g70
g51
NtRp3257
(dp3258
g54
(dp3259
sg63
g3245
sg56
(lp3260
g49
(g50
g51
NtRp3261
(dp3262
g54
(dp3263
g62
I3
ssg63
g3257
sg56
(lp3264
S''
asbasbasbag49
(g65
g51
NtRp3265
(dp3266
g54
(dp3267
sg63
g3181
sg56
(lp3268
g49
(g70
g51
NtRp3269
(dp3270
g54
(dp3271
g74
g75
ssg63
g3265
sg56
(lp3272
g347
asbag49
(g70
g51
NtRp3273
(dp3274
g54
(dp3275
g81
g82
ssg63
g3265
sg56
(lp3276
S':'
asbag49
(g70
g51
NtRp3277
(dp3278
g54
(dp3279
sg63
g3265
sg56
(lp3280
g49
(g50
g51
NtRp3281
(dp3282
g54
(dp3283
g62
I3
ssg63
g3277
sg56
(lp3284
S'/'
asbasbasbag49
(g65
g51
NtRp3285
(dp3286
g54
(dp3287
sg63
g3181
sg56
(lp3288
g49
(g70
g51
NtRp3289
(dp3290
g54
(dp3291
g74
g75
ssg63
g3285
sg56
(lp3292
g368
asbag49
(g70
g51
NtRp3293
(dp3294
g54
(dp3295
g81
g82
ssg63
g3285
sg56
(lp3296
S':'
asbag49
(g70
g51
NtRp3297
(dp3298
g54
(dp3299
sg63
g3285
sg56
(lp3300
g49
(g50
g51
NtRp3301
(dp3302
g54
(dp3303
g62
I3
ssg63
g3297
sg56
(lp3304
S''
asbasbasbag49
(g65
g51
NtRp3305
(dp3306
g54
(dp3307
sg63
g3181
sg56
(lp3308
g49
(g70
g51
NtRp3309
(dp3310
g54
(dp3311
g74
g75
ssg63
g3305
sg56
(lp3312
g389
asbag49
(g70
g51
NtRp3313
(dp3314
g54
(dp3315
g81
g82
ssg63
g3305
sg56
(lp3316
S':'
asbag49
(g70
g51
NtRp3317
(dp3318
g54
(dp3319
sg63
g3305
sg56
(lp3320
g49
(g50
g51
NtRp3321
(dp3322
g54
(dp3323
g62
I3
ssg63
g3317
sg56
(lp3324
S''
asbasbasbasbasbasbasbasbasbasbasbag49
(g65
g51
NtRp3325
(dp3326
g54
(dp3327
sg63
g3111
sg56
(lp3328
g49
(g70
g51
NtRp3329
(dp3330
g54
(dp3331
g74
g75
ssg63
g3325
sg56
(lp3332
S'delimiters'
p3333
asbag49
(g70
g51
NtRp3334
(dp3335
g54
(dp3336
g81
g82
ssg63
g3325
sg56
(lp3337
S':'
asbag49
(g70
g51
NtRp3338
(dp3339
g54
(dp3340
sg63
g3325
sg56
(lp3341
g49
(g50
g51
NtRp3342
(dp3343
g54
(dp3344
g62
I5
ssg63
g3338
sg56
(lp3345
g49
(g58
g51
NtRp3346
(dp3347
g54
(dp3348
g62
I4
ssg63
Nsg56
(lp3349
g49
(g65
g51
NtRp3350
(dp3351
g54
(dp3352
sg63
g3346
sg56
(lp3353
g49
(g70
g51
NtRp3354
(dp3355
g54
(dp3356
sg63
g3350
sg56
(lp3357
g49
(g50
g51
NtRp3358
(dp3359
g54
(dp3360
g62
I4
ssg63
g3354
sg56
(lp3361
S'{{'
p3362
asbasbasbag49
(g65
g51
NtRp3363
(dp3364
g54
(dp3365
sg63
g3346
sg56
(lp3366
g49
(g70
g51
NtRp3367
(dp3368
g54
(dp3369
sg63
g3363
sg56
(lp3370
g49
(g50
g51
NtRp3371
(dp3372
g54
(dp3373
g62
I4
ssg63
g3367
sg56
(lp3374
S'}}'
p3375
asbasbasbasbasbasbasbag49
(g65
g51
NtRp3376
(dp3377
g54
(dp3378
sg63
g3111
sg56
(lp3379
g49
(g70
g51
NtRp3380
(dp3381
g54
(dp3382
g74
g75
ssg63
g3376
sg56
(lp3383
S'files'
p3384
asbag49
(g70
g51
NtRp3385
(dp3386
g54
(dp3387
g81
g82
ssg63
g3376
sg56
(lp3388
S':'
asbag49
(g70
g51
NtRp3389
(dp3390
g54
(dp3391
sg63
g3376
sg56
(lp3392
g49
(g50
g51
NtRp3393
(dp3394
g54
(dp3395
g62
I5
ssg63
g3389
sg56
(lp3396
g49
(g58
g51
NtRp3397
(dp3398
g54
(dp3399
g62
I4
ssg63
Nsg56
(lp3400
g49
(g65
g51
NtRp3401
(dp3402
g54
(dp3403
sg63
g3397
sg56
(lp3404
g49
(g70
g51
NtRp3405
(dp3406
g54
(dp3407
sg63
g3401
sg56
(lp3408
g49
(g50
g51
NtRp3409
(dp3410
g54
(dp3411
g62
I4
ssg63
g3405
sg56
(lp3412
S'/admin/static/plugin_multiselect/jquery.dimensions.js'
p3413
asbasbasbag49
(g65
g51
NtRp3414
(dp3415
g54
(dp3416
sg63
g3397
sg56
(lp3417
g49
(g70
g51
NtRp3418
(dp3419
g54
(dp3420
sg63
g3414
sg56
(lp3421
g49
(g50
g51
NtRp3422
(dp3423
g54
(dp3424
g62
I4
ssg63
g3418
sg56
(lp3425
S'/admin/static/plugin_multiselect/jquery.multiselect.js'
p3426
asbasbasbag49
(g65
g51
NtRp3427
(dp3428
g54
(dp3429
sg63
g3397
sg56
(lp3430
g49
(g70
g51
NtRp3431
(dp3432
g54
(dp3433
sg63
g3427
sg56
(lp3434
g49
(g50
g51
NtRp3435
(dp3436
g54
(dp3437
g62
I4
ssg63
g3431
sg56
(lp3438
S'/admin/static/plugin_multiselect/jquery.multiselect.css'
p3439
asbasbasbag49
(g65
g51
NtRp3440
(dp3441
g54
(dp3442
sg63
g3397
sg56
(lp3443
g49
(g70
g51
NtRp3444
(dp3445
g54
(dp3446
sg63
g3440
sg56
(lp3447
g49
(g50
g51
NtRp3448
(dp3449
g54
(dp3450
g62
I4
ssg63
g3444
sg56
(lp3451
S'/admin/static/plugin_multiselect/start.js'
p3452
asbasbasbasbasbasbasbag49
(g65
g51
NtRp3453
(dp3454
g54
(dp3455
sg63
g3111
sg56
(lp3456
g49
(g70
g51
NtRp3457
(dp3458
g54
(dp3459
g74
g75
ssg63
g3453
sg56
(lp3460
S'flash'
p3461
asbag49
(g70
g51
NtRp3462
(dp3463
g54
(dp3464
g81
g82
ssg63
g3453
sg56
(lp3465
S':'
asbag49
(g70
g51
NtRp3466
(dp3467
g54
(dp3468
sg63
g3453
sg56
(lp3469
g49
(g50
g51
NtRp3470
(dp3471
g54
(dp3472
g62
I5
ssg63
g3466
sg56
(lp3473
S''
asbasbasbag49
(g65
g51
NtRp3474
(dp3475
g54
(dp3476
sg63
g3111
sg56
(lp3477
g49
(g70
g51
NtRp3478
(dp3479
g54
(dp3480
g74
g75
ssg63
g3474
sg56
(lp3481
S'generic_patterns'
p3482
asbag49
(g70
g51
NtRp3483
(dp3484
g54
(dp3485
g81
g82
ssg63
g3474
sg56
(lp3486
S':'
asbag49
(g70
g51
NtRp3487
(dp3488
g54
(dp3489
sg63
g3474
sg56
(lp3490
g49
(g50
g51
NtRp3491
(dp3492
g54
(dp3493
g62
I5
ssg63
g3487
sg56
(lp3494
g49
(g58
g51
NtRp3495
(dp3496
g54
(dp3497
g62
I4
ssg63
Nsg56
(lp3498
sbasbasbasbag49
(g65
g51
NtRp3499
(dp3500
g54
(dp3501
sg63
g3111
sg56
(lp3502
g49
(g70
g51
NtRp3503
(dp3504
g54
(dp3505
g74
g75
ssg63
g3499
sg56
(lp3506
S'headers'
p3507
asbag49
(g70
g51
NtRp3508
(dp3509
g54
(dp3510
g81
g82
ssg63
g3499
sg56
(lp3511
S':'
asbag49
(g70
g51
NtRp3512
(dp3513
g54
(dp3514
sg63
g3499
sg56
(lp3515
g49
(g50
g51
NtRp3516
(dp3517
g54
(dp3518
g62
I5
ssg63
g3512
sg56
(lp3519
g49
(g58
g51
NtRp3520
(dp3521
g54
(dp3522
g62
I4
ssg63
Nsg56
(lp3523
g49
(g65
g51
NtRp3524
(dp3525
g54
(dp3526
sg63
g3520
sg56
(lp3527
g49
(g70
g51
NtRp3528
(dp3529
g54
(dp3530
g74
g75
ssg63
g3524
sg56
(lp3531
S'Cache-Control'
p3532
asbag49
(g70
g51
NtRp3533
(dp3534
g54
(dp3535
g81
g82
ssg63
g3524
sg56
(lp3536
S':'
asbag49
(g70
g51
NtRp3537
(dp3538
g54
(dp3539
sg63
g3524
sg56
(lp3540
g49
(g50
g51
NtRp3541
(dp3542
g54
(dp3543
g62
I4
ssg63
g3537
sg56
(lp3544
S'no-store, no-cache, must-revalidate, post-check=0, pre-check=0'
p3545
asbasbasbag49
(g65
g51
NtRp3546
(dp3547
g54
(dp3548
sg63
g3520
sg56
(lp3549
g49
(g70
g51
NtRp3550
(dp3551
g54
(dp3552
g74
g75
ssg63
g3546
sg56
(lp3553
S'Content-Type'
p3554
asbag49
(g70
g51
NtRp3555
(dp3556
g54
(dp3557
g81
g82
ssg63
g3546
sg56
(lp3558
S':'
asbag49
(g70
g51
NtRp3559
(dp3560
g54
(dp3561
sg63
g3546
sg56
(lp3562
g49
(g50
g51
NtRp3563
(dp3564
g54
(dp3565
g62
I4
ssg63
g3559
sg56
(lp3566
S'text/html; charset=utf-8'
p3567
asbasbasbag49
(g65
g51
NtRp3568
(dp3569
g54
(dp3570
sg63
g3520
sg56
(lp3571
g49
(g70
g51
NtRp3572
(dp3573
g54
(dp3574
g74
g75
ssg63
g3568
sg56
(lp3575
S'Expires'
p3576
asbag49
(g70
g51
NtRp3577
(dp3578
g54
(dp3579
g81
g82
ssg63
g3568
sg56
(lp3580
S':'
asbag49
(g70
g51
NtRp3581
(dp3582
g54
(dp3583
sg63
g3568
sg56
(lp3584
g49
(g50
g51
NtRp3585
(dp3586
g54
(dp3587
g62
I4
ssg63
g3581
sg56
(lp3588
S'Mon, 05 Nov 2012 20:26:03 GMT'
p3589
asbasbasbag49
(g65
g51
NtRp3590
(dp3591
g54
(dp3592
sg63
g3520
sg56
(lp3593
g49
(g70
g51
NtRp3594
(dp3595
g54
(dp3596
g74
g75
ssg63
g3590
sg56
(lp3597
S'Pragma'
p3598
asbag49
(g70
g51
NtRp3599
(dp3600
g54
(dp3601
g81
g82
ssg63
g3590
sg56
(lp3602
S':'
asbag49
(g70
g51
NtRp3603
(dp3604
g54
(dp3605
sg63
g3590
sg56
(lp3606
g49
(g50
g51
NtRp3607
(dp3608
g54
(dp3609
g62
I4
ssg63
g3603
sg56
(lp3610
S'no-cache'
p3611
asbasbasbag49
(g65
g51
NtRp3612
(dp3613
g54
(dp3614
sg63
g3520
sg56
(lp3615
g49
(g70
g51
NtRp3616
(dp3617
g54
(dp3618
g74
g75
ssg63
g3612
sg56
(lp3619
S'X-Powered-By'
p3620
asbag49
(g70
g51
NtRp3621
(dp3622
g54
(dp3623
g81
g82
ssg63
g3612
sg56
(lp3624
S':'
asbag49
(g70
g51
NtRp3625
(dp3626
g54
(dp3627
sg63
g3612
sg56
(lp3628
g49
(g50
g51
NtRp3629
(dp3630
g54
(dp3631
g62
I4
ssg63
g3625
sg56
(lp3632
S'web2py'
p3633
asbasbasbasbasbasbasbag49
(g65
g51
NtRp3634
(dp3635
g54
(dp3636
sg63
g3111
sg56
(lp3637
g49
(g70
g51
NtRp3638
(dp3639
g54
(dp3640
g74
g75
ssg63
g3634
sg56
(lp3641
S'menu'
p3642
asbag49
(g70
g51
NtRp3643
(dp3644
g54
(dp3645
g81
g82
ssg63
g3634
sg56
(lp3646
S':'
asbag49
(g70
g51
NtRp3647
(dp3648
g54
(dp3649
sg63
g3634
sg56
(lp3650
g49
(g50
g51
NtRp3651
(dp3652
g54
(dp3653
g62
I5
ssg63
g3647
sg56
(lp3654
g49
(g58
g51
NtRp3655
(dp3656
g54
(dp3657
g62
I4
ssg63
Nsg56
(lp3658
g49
(g65
g51
NtRp3659
(dp3660
g54
(dp3661
sg63
g3655
sg56
(lp3662
g49
(g70
g51
NtRp3663
(dp3664
g54
(dp3665
sg63
g3659
sg56
(lp3666
g49
(g50
g51
NtRp3667
(dp3668
g54
(dp3669
g62
I4
ssg63
g3663
sg56
(lp3670
g49
(g58
g51
NtRp3671
(dp3672
g54
(dp3673
g62
I3
ssg63
Nsg56
(lp3674
g49
(g65
g51
NtRp3675
(dp3676
g54
(dp3677
sg63
g3671
sg56
(lp3678
g49
(g70
g51
NtRp3679
(dp3680
g54
(dp3681
sg63
g3675
sg56
(lp3682
g49
(g50
g51
NtRp3683
(dp3684
g54
(dp3685
g62
I3
ssg63
g3679
sg56
(lp3686
cgluon.languages
lazyT_unpickle
p3687
(S's\x04\x00\x00\x00Site'
tRp3688
asbasbasbag49
(g65
g51
NtRp3689
(dp3690
g54
(dp3691
sg63
g3671
sg56
(lp3692
g49
(g70
g51
NtRp3693
(dp3694
g54
(dp3695
sg63
g3689
sg56
(lp3696
g49
(g50
g51
NtRp3697
(dp3698
g54
(dp3699
g62
I3
ssg63
g3693
sg56
(lp3700
g747
asbasbasbag49
(g65
g51
NtRp3701
(dp3702
g54
(dp3703
sg63
g3671
sg56
(lp3704
g49
(g70
g51
NtRp3705
(dp3706
g54
(dp3707
sg63
g3701
sg56
(lp3708
g49
(g50
g51
NtRp3709
(dp3710
g54
(dp3711
g62
I3
ssg63
g3705
sg56
(lp3712
S'/admin/default/site'
p3713
asbasbasbasbasbasbasbag49
(g65
g51
NtRp3714
(dp3715
g54
(dp3716
sg63
g3655
sg56
(lp3717
g49
(g70
g51
NtRp3718
(dp3719
g54
(dp3720
sg63
g3714
sg56
(lp3721
g49
(g50
g51
NtRp3722
(dp3723
g54
(dp3724
g62
I4
ssg63
g3718
sg56
(lp3725
g49
(g58
g51
NtRp3726
(dp3727
g54
(dp3728
g62
I3
ssg63
Nsg56
(lp3729
g49
(g65
g51
NtRp3730
(dp3731
g54
(dp3732
sg63
g3726
sg56
(lp3733
g49
(g70
g51
NtRp3734
(dp3735
g54
(dp3736
sg63
g3730
sg56
(lp3737
g49
(g50
g51
NtRp3738
(dp3739
g54
(dp3740
g62
I3
ssg63
g3734
sg56
(lp3741
g3687
(S's\x06\x00\x00\x00Logout'
tRp3742
asbasbasbag49
(g65
g51
NtRp3743
(dp3744
g54
(dp3745
sg63
g3726
sg56
(lp3746
g49
(g70
g51
NtRp3747
(dp3748
g54
(dp3749
sg63
g3743
sg56
(lp3750
g49
(g50
g51
NtRp3751
(dp3752
g54
(dp3753
g62
I3
ssg63
g3747
sg56
(lp3754
g747
asbasbasbag49
(g65
g51
NtRp3755
(dp3756
g54
(dp3757
sg63
g3726
sg56
(lp3758
g49
(g70
g51
NtRp3759
(dp3760
g54
(dp3761
sg63
g3755
sg56
(lp3762
g49
(g50
g51
NtRp3763
(dp3764
g54
(dp3765
g62
I3
ssg63
g3759
sg56
(lp3766
S'/admin/default/logout'
p3767
asbasbasbasbasbasbasbag49
(g65
g51
NtRp3768
(dp3769
g54
(dp3770
sg63
g3655
sg56
(lp3771
g49
(g70
g51
NtRp3772
(dp3773
g54
(dp3774
sg63
g3768
sg56
(lp3775
g49
(g50
g51
NtRp3776
(dp3777
g54
(dp3778
g62
I4
ssg63
g3772
sg56
(lp3779
g49
(g58
g51
NtRp3780
(dp3781
g54
(dp3782
g62
I3
ssg63
Nsg56
(lp3783
g49
(g65
g51
NtRp3784
(dp3785
g54
(dp3786
sg63
g3780
sg56
(lp3787
g49
(g70
g51
NtRp3788
(dp3789
g54
(dp3790
sg63
g3784
sg56
(lp3791
g49
(g50
g51
NtRp3792
(dp3793
g54
(dp3794
g62
I3
ssg63
g3788
sg56
(lp3795
g3687
(S's\x05\x00\x00\x00Debug'
tRp3796
asbasbasbag49
(g65
g51
NtRp3797
(dp3798
g54
(dp3799
sg63
g3780
sg56
(lp3800
g49
(g70
g51
NtRp3801
(dp3802
g54
(dp3803
sg63
g3797
sg56
(lp3804
g49
(g50
g51
NtRp3805
(dp3806
g54
(dp3807
g62
I3
ssg63
g3801
sg56
(lp3808
g747
asbasbasbag49
(g65
g51
NtRp3809
(dp3810
g54
(dp3811
sg63
g3780
sg56
(lp3812
g49
(g70
g51
NtRp3813
(dp3814
g54
(dp3815
sg63
g3809
sg56
(lp3816
g49
(g50
g51
NtRp3817
(dp3818
g54
(dp3819
g62
I3
ssg63
g3813
sg56
(lp3820
S'/admin/debug/interact'
p3821
asbasbasbasbasbasbasbag49
(g65
g51
NtRp3822
(dp3823
g54
(dp3824
sg63
g3655
sg56
(lp3825
g49
(g70
g51
NtRp3826
(dp3827
g54
(dp3828
sg63
g3822
sg56
(lp3829
g49
(g50
g51
NtRp3830
(dp3831
g54
(dp3832
g62
I4
ssg63
g3826
sg56
(lp3833
g49
(g58
g51
NtRp3834
(dp3835
g54
(dp3836
g62
I3
ssg63
Nsg56
(lp3837
g49
(g65
g51
NtRp3838
(dp3839
g54
(dp3840
sg63
g3834
sg56
(lp3841
g49
(g70
g51
NtRp3842
(dp3843
g54
(dp3844
sg63
g3838
sg56
(lp3845
g49
(g50
g51
NtRp3846
(dp3847
g54
(dp3848
g62
I3
ssg63
g3842
sg56
(lp3849
g3687
(S's\x04\x00\x00\x00Help'
tRp3850
asbasbasbag49
(g65
g51
NtRp3851
(dp3852
g54
(dp3853
sg63
g3834
sg56
(lp3854
g49
(g70
g51
NtRp3855
(dp3856
g54
(dp3857
sg63
g3851
sg56
(lp3858
g49
(g50
g51
NtRp3859
(dp3860
g54
(dp3861
g62
I3
ssg63
g3855
sg56
(lp3862
g747
asbasbasbag49
(g65
g51
NtRp3863
(dp3864
g54
(dp3865
sg63
g3834
sg56
(lp3866
g49
(g70
g51
NtRp3867
(dp3868
g54
(dp3869
sg63
g3863
sg56
(lp3870
g49
(g50
g51
NtRp3871
(dp3872
g54
(dp3873
g62
I3
ssg63
g3867
sg56
(lp3874
S'/examples/default/index'
p3875
asbasbasbasbasbasbasbasbasbasbasbag49
(g65
g51
NtRp3876
(dp3877
g54
(dp3878
sg63
g3111
sg56
(lp3879
g49
(g70
g51
NtRp3880
(dp3881
g54
(dp3882
g74
g75
ssg63
g3876
sg56
(lp3883
S'meta'
p3884
asbag49
(g70
g51
NtRp3885
(dp3886
g54
(dp3887
g81
g82
ssg63
g3876
sg56
(lp3888
S':'
asbag49
(g70
g51
NtRp3889
(dp3890
g54
(dp3891
sg63
g3876
sg56
(lp3892
g49
(g50
g51
NtRp3893
(dp3894
g54
(dp3895
g62
I5
ssg63
g3889
sg56
(lp3896
g49
(g58
g51
NtRp3897
(dp3898
g54
(dp3899
g62
I4
ssg63
Nsg56
(lp3900
sbasbasbasbag49
(g65
g51
NtRp3901
(dp3902
g54
(dp3903
sg63
g3111
sg56
(lp3904
g49
(g70
g51
NtRp3905
(dp3906
g54
(dp3907
g74
g75
ssg63
g3901
sg56
(lp3908
S'postprocessing'
p3909
asbag49
(g70
g51
NtRp3910
(dp3911
g54
(dp3912
g81
g82
ssg63
g3901
sg56
(lp3913
S':'
asbag49
(g70
g51
NtRp3914
(dp3915
g54
(dp3916
sg63
g3901
sg56
(lp3917
g49
(g50
g51
NtRp3918
(dp3919
g54
(dp3920
g62
I5
ssg63
g3914
sg56
(lp3921
g49
(g58
g51
NtRp3922
(dp3923
g54
(dp3924
g62
I4
ssg63
Nsg56
(lp3925
sbasbasbasbag49
(g65
g51
NtRp3926
(dp3927
g54
(dp3928
sg63
g3111
sg56
(lp3929
g49
(g70
g51
NtRp3930
(dp3931
g54
(dp3932
g74
g75
ssg63
g3926
sg56
(lp3933
S'session_file'
p3934
asbag49
(g70
g51
NtRp3935
(dp3936
g54
(dp3937
g81
g82
ssg63
g3926
sg56
(lp3938
S':'
asbag49
(g70
g51
NtRp3939
(dp3940
g54
(dp3941
sg63
g3926
sg56
(lp3942
g49
(g50
g51
NtRp3943
(dp3944
g54
(dp3945
g62
I5
ssg63
g3939
sg56
(lp3946
S"<open file 'C:\\web2py\\applications\\admin\\sessions\\127.0.0.1-d6ef1267-b04c-4f80-b32f-ca10885fdfd5', mode 'rb+' at 0x03219650>"
p3947
asbasbasbag49
(g65
g51
NtRp3948
(dp3949
g54
(dp3950
sg63
g3111
sg56
(lp3951
g49
(g70
g51
NtRp3952
(dp3953
g54
(dp3954
g74
g75
ssg63
g3948
sg56
(lp3955
S'session_filename'
p3956
asbag49
(g70
g51
NtRp3957
(dp3958
g54
(dp3959
g81
g82
ssg63
g3948
sg56
(lp3960
S':'
asbag49
(g70
g51
NtRp3961
(dp3962
g54
(dp3963
sg63
g3948
sg56
(lp3964
g49
(g50
g51
NtRp3965
(dp3966
g54
(dp3967
g62
I5
ssg63
g3961
sg56
(lp3968
S'C:\\web2py\\applications\\admin\\sessions\\127.0.0.1-d6ef1267-b04c-4f80-b32f-ca10885fdfd5'
p3969
asbasbasbag49
(g65
g51
NtRp3970
(dp3971
g54
(dp3972
sg63
g3111
sg56
(lp3973
g49
(g70
g51
NtRp3974
(dp3975
g54
(dp3976
g74
g75
ssg63
g3970
sg56
(lp3977
S'session_id'
p3978
asbag49
(g70
g51
NtRp3979
(dp3980
g54
(dp3981
g81
g82
ssg63
g3970
sg56
(lp3982
S':'
asbag49
(g70
g51
NtRp3983
(dp3984
g54
(dp3985
sg63
g3970
sg56
(lp3986
g49
(g50
g51
NtRp3987
(dp3988
g54
(dp3989
g62
I5
ssg63
g3983
sg56
(lp3990
S'127.0.0.1-d6ef1267-b04c-4f80-b32f-ca10885fdfd5'
p3991
asbasbasbag49
(g65
g51
NtRp3992
(dp3993
g54
(dp3994
sg63
g3111
sg56
(lp3995
g49
(g70
g51
NtRp3996
(dp3997
g54
(dp3998
g74
g75
ssg63
g3992
sg56
(lp3999
S'session_id_name'
p4000
asbag49
(g70
g51
NtRp4001
(dp4002
g54
(dp4003
g81
g82
ssg63
g3992
sg56
(lp4004
S':'
asbag49
(g70
g51
NtRp4005
(dp4006
g54
(dp4007
sg63
g3992
sg56
(lp4008
g49
(g50
g51
NtRp4009
(dp4010
g54
(dp4011
g62
I5
ssg63
g4005
sg56
(lp4012
g3168
asbasbasbag49
(g65
g51
NtRp4013
(dp4014
g54
(dp4015
sg63
g3111
sg56
(lp4016
g49
(g70
g51
NtRp4017
(dp4018
g54
(dp4019
g74
g75
ssg63
g4013
sg56
(lp4020
S'session_locked'
p4021
asbag49
(g70
g51
NtRp4022
(dp4023
g54
(dp4024
g81
g82
ssg63
g4013
sg56
(lp4025
S':'
asbag49
(g70
g51
NtRp4026
(dp4027
g54
(dp4028
sg63
g4013
sg56
(lp4029
g49
(g50
g51
NtRp4030
(dp4031
g54
(dp4032
g62
I5
ssg63
g4026
sg56
(lp4033
g747
asbasbasbag49
(g65
g51
NtRp4034
(dp4035
g54
(dp4036
sg63
g3111
sg56
(lp4037
g49
(g70
g51
NtRp4038
(dp4039
g54
(dp4040
g74
g75
ssg63
g4034
sg56
(lp4041
S'session_new'
p4042
asbag49
(g70
g51
NtRp4043
(dp4044
g54
(dp4045
g81
g82
ssg63
g4034
sg56
(lp4046
S':'
asbag49
(g70
g51
NtRp4047
(dp4048
g54
(dp4049
sg63
g4034
sg56
(lp4050
g49
(g50
g51
NtRp4051
(dp4052
g54
(dp4053
g62
I5
ssg63
g4047
sg56
(lp4054
g747
asbasbasbag49
(g65
g51
NtRp4055
(dp4056
g54
(dp4057
sg63
g3111
sg56
(lp4058
g49
(g70
g51
NtRp4059
(dp4060
g54
(dp4061
g74
g75
ssg63
g4055
sg56
(lp4062
S'status'
p4063
asbag49
(g70
g51
NtRp4064
(dp4065
g54
(dp4066
g81
g82
ssg63
g4055
sg56
(lp4067
S':'
asbag49
(g70
g51
NtRp4068
(dp4069
g54
(dp4070
sg63
g4055
sg56
(lp4071
g49
(g50
g51
NtRp4072
(dp4073
g54
(dp4074
g62
I5
ssg63
g4068
sg56
(lp4075
S'200'
p4076
asbasbasbag49
(g65
g51
NtRp4077
(dp4078
g54
(dp4079
sg63
g3111
sg56
(lp4080
g49
(g70
g51
NtRp4081
(dp4082
g54
(dp4083
g74
g75
ssg63
g4077
sg56
(lp4084
S'subtitle'
p4085
asbag49
(g70
g51
NtRp4086
(dp4087
g54
(dp4088
g81
g82
ssg63
g4077
sg56
(lp4089
S':'
asbag49
(g70
g51
NtRp4090
(dp4091
g54
(dp4092
sg63
g4077
sg56
(lp4093
g49
(g50
g51
NtRp4094
(dp4095
g54
(dp4096
g62
I5
ssg63
g4090
sg56
(lp4097
S'admin'
p4098
asbasbasbag49
(g65
g51
NtRp4099
(dp4100
g54
(dp4101
sg63
g3111
sg56
(lp4102
g49
(g70
g51
NtRp4103
(dp4104
g54
(dp4105
g74
g75
ssg63
g4099
sg56
(lp4106
S'title'
p4107
asbag49
(g70
g51
NtRp4108
(dp4109
g54
(dp4110
g81
g82
ssg63
g4099
sg56
(lp4111
S':'
asbag49
(g70
g51
NtRp4112
(dp4113
g54
(dp4114
sg63
g4099
sg56
(lp4115
g49
(g50
g51
NtRp4116
(dp4117
g54
(dp4118
g62
I5
ssg63
g4112
sg56
(lp4119
S'check_version '
p4120
asbasbasbag49
(g65
g51
NtRp4121
(dp4122
g54
(dp4123
sg63
g3111
sg56
(lp4124
g49
(g70
g51
NtRp4125
(dp4126
g54
(dp4127
g74
g75
ssg63
g4121
sg56
(lp4128
g2215
asbag49
(g70
g51
NtRp4129
(dp4130
g54
(dp4131
g81
g82
ssg63
g4121
sg56
(lp4132
S':'
asbag49
(g70
g51
NtRp4133
(dp4134
g54
(dp4135
sg63
g4121
sg56
(lp4136
g49
(g50
g51
NtRp4137
(dp4138
g54
(dp4139
g62
I5
ssg63
g4133
sg56
(lp4140
g2228
asbasbasbag49
(g65
g51
NtRp4141
(dp4142
g54
(dp4143
sg63
g3111
sg56
(lp4144
g49
(g70
g51
NtRp4145
(dp4146
g54
(dp4147
g74
g75
ssg63
g4141
sg56
(lp4148
S'view'
p4149
asbag49
(g70
g51
NtRp4150
(dp4151
g54
(dp4152
g81
g82
ssg63
g4141
sg56
(lp4153
S':'
asbag49
(g70
g51
NtRp4154
(dp4155
g54
(dp4156
sg63
g4141
sg56
(lp4157
g49
(g50
g51
NtRp4158
(dp4159
g54
(dp4160
g62
I5
ssg63
g4154
sg56
(lp4161
S'default/check_version.html'
p4162
asbasbasbasbasbsS'locals'
p4163
(dp4164
S'version_number'
p4165
S"(2, 2, 1, datetime.datetime(2012, 10, 21, 16, 57, 4), 'stable')"
p4166
sS'new_version'
p4167
g92
sssS'traceback'
p4168
S'Traceback (most recent call last):\n  File "gluon/restricted.py", line 205, in restricted\n  File "C:\\web2py\\applications\\admin\\controllers/default.py", line 1352, in <module>\n  File "gluon/globals.py", line 173, in <lambda>\n  File "C:\\web2py\\applications\\admin\\controllers/default.py", line 110, in check_version\nTypeError: not all arguments converted during string formatting\n'
p4169
s.